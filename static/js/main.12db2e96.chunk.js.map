{"version":3,"sources":["services/units.ts","components/new_path.jsx","services/coords.ts","components/generated.tsx","theme.js","components/sidebar.tsx","services/squiggles.js","app.tsx","services/useDebouncedEffect.js","reportWebVitals.ts","index.tsx"],"names":["FIELD_METERS","DrawNewPath","props","mount","useRef","two","group","startWidth","savedBoundingRect","savedLeft","prevMode","prevLatch","prevField","listeners","theme","useTheme","neutralColor","editColor","palette","primary","main","robotColor","light","blue","red","blueBalls","redBalls","drawerWidth","open","paths","mode","setMode","field","setCanvasDims","setPaths","badPaths","latch","trackWidth","getCursorPosition","e","x","clientX","y","clientY","left","current","top","scene","scale","addInteractivity","shape","offset","translation","drag","preventDefault","cursor","set","touchDrag","touch","originalEvent","changedTouches","pageX","pageY","dragEnd","forEach","p","vectors","v","r","id","Math","abs","rotation","PI","window","removeEventListener","touchEnd","addNewEventListener","_renderer","elem","addEventListener","createAnchorPoint","anchor","newPath","pathKey","idx","robotSquare","_collection","makeRectangle","width","noFill","stroke","linewidth","add","makeCircle","makePolygon","atan2","controls","right","copy","addSelf","noStroke","fill","rl","Two","Path","Anchor","g","makeGroup","bind","Events","change","this","vertices","Map","waypoints","get","map","s","path","subSelf","opp","Vector","rot","update","updatedVec","newVec","Array","from","splice","push","drawLine","anchors","cap","join","placePoints","point","size","str","curKey","keys","k","charCodeAt","curPath","length","lastPoint","i","remove","createPath","substring","String","fromCharCode","node","event","handler","listener","removeAllEventListeners","capSize","newWidth","max","min","resize","useCallback","renderer","setSize","useEffect","rand_gray","value","random","toString","getBoundingClientRect","height","autostart","appendTo","tile_width","field_center","field_bot","field_right","goal_radius","goal_linewidth","double_line_space","line_width","background","bg","j","rec","field_tiles","left_autonline","makeLine","right_autonline","left_line","right_line","leftdoubletop_line","leftdoublebot_line","rightdoubletop_line","rightdoublebot_line","lines","topcenter_goal","topleft_goal","topright_goal","leftcenter_goal","center_goal","rightcenter_goal","botleft_goal","botcenter_goal","botright_goal","goals","boxWidth","key","midpoint","getPointAt","r2","addMidpoint","cos","sin","pop","delete","ballRadius","blueCenterLeft","blueCenterBot","blueBotMidCenter","blueBotCenter","blueBotLeft","blueLeftCenter","blueTopLeft","blueTopRight","blueBotRight","redCenterRight","redCenterTop","redTopMidCenter","redTopCenter","redTopRight","redRightCenter","redBotRight","redTopLeft","redBotLeft","compSetup","blueCenter","blueTopCenter","blueRightCenter","redCenterLeft","redCenterBot","redBotMidCenter","redTopCenterLeft","redBotCenterLeft","redTopCenterRight","redBotCenterRight","skillsSetup","console","log","ref","squigglesCoords","canvasX","canvasY","yaw","vel","sqrt","pow","okapiCoords","TabPanel","children","index","other","role","hidden","aria-labelledby","Box","pt","style","backgroundColor","a11yProps","useStyles","makeStyles","root","flexGrow","paper","maxWidth","SimpleTabs","classes","React","useState","setValue","className","AppBar","position","Tabs","onChange","newValue","aria-label","Tab","label","text","out","maxVel","maxAccel","maxJerk","slice","vec","coords","canvasDims","toFixed","okapiCode","language","showLineNumbers","atomOneDark","codeBlock","squigglesCode","themeColor","createMuiTheme","dark","overrides","MuiToggleButton","color","createStyles","drawerHeader","display","alignItems","padding","spacing","mixins","toolbar","justifyContent","SidebarContent","seasons","IconButton","onClick","handleDrawerClose","direction","Divider","List","ListItem","Typography","variant","ToggleButtonGroup","exclusive","newMode","ToggleButton","FormControlLabel","control","Checkbox","checked","setLatch","target","name","TextField","required","setTrackWidth","setMaxVel","setMaxAccel","setMaxJerk","fullWidth","select","defaultValue","MenuItem","newField","setField","msg","_status","worker","postMessage","Promise","res","rej","interval","setInterval","status","clearInterval","Worker","onmessage","data","onerror","_dispatch","payload","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","title","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","content","overflow","contentShift","App","setOpen","innerWidth","innerHeight","setBadPaths","effect","delay","deps","callback","setTimeout","clearTimeout","useDebouncedEffect","poses","generatePath","sx","sy","syaw","sv","gx","gy","gyaw","gv","max_vel","parseFloat","max_accel","max_jerk","track_width","a","squiggles","generate","rtn","load","ThemeProvider","CssBaseline","clsx","Toolbar","edge","noWrap","Button","href","Drawer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12db2e96.chunk.js","sourcesContent":["export const FIELD_METERS = 3.6576;\n","import React, { useCallback, useEffect, useRef } from \"react\";\nimport { useTheme } from \"@material-ui/core\";\nimport Two from \"two.js\";\n\nimport { FIELD_METERS } from \"../services/units\";\n\nexport const DrawNewPath = (props) => {\n  const mount = useRef(null);\n  const two = useRef(null);\n  const group = useRef(null);\n\n  const startWidth = useRef(null);\n  const savedBoundingRect = useRef(null);\n  const savedLeft = useRef(null);\n\n  const prevMode = useRef(null);\n  const prevLatch = useRef(null);\n  const prevField = useRef(null);\n  const listeners = useRef([]);\n\n  const theme = useTheme();\n  const neutralColor = \"#333\";\n  const editColor = theme.palette.primary.main;\n  const robotColor = theme.palette.primary.light;\n  const blue = \"rgb(70, 70, 255)\";\n  const red = \"rgb(255, 40, 40)\";\n  const blueBalls = useRef(null);\n  const redBalls = useRef(null);\n\n  const {\n    drawerWidth,\n    open,\n    mode,\n    setMode,\n    field,\n    paths,\n    setPaths,\n    setCanvasDims,\n    latch,\n    trackWidth,\n    badPaths,\n  } = props;\n\n  /**\n   * Modifies the mouse event to fit with the Two canvas coordinates.\n   *\n   * @param e The mouse event\n   *\n   * @returns {x: number, y: number}\n   */\n  const getCursorPosition = (e) => {\n    let x = e.clientX;\n    let y = e.clientY;\n    // relying on savedLeft to tell us if the drawer is open\n    let left = savedBoundingRect.current.left + savedLeft.current ?? 0;\n    let top = savedBoundingRect.current.top;\n    return {\n      x: (x - left) / two.current.scene.scale,\n      y: (y - top) / two.current.scene.scale,\n    };\n  };\n\n  const addInteractivity = (shape) => {\n    const offset = group.current.translation;\n\n    var drag = function (e) {\n      e.preventDefault();\n      const cursor = getCursorPosition(e);\n      var x = cursor.x - offset.x;\n      var y = cursor.y - offset.y;\n      shape.translation.set(x, y);\n    };\n    var touchDrag = function (e) {\n      e.preventDefault();\n      var touch = e.originalEvent.changedTouches[0];\n      drag({\n        preventDefault: function () {},\n        clientX: touch.pageX,\n        clientY: touch.pageY,\n      });\n      return false;\n    };\n    var dragEnd = function (e) {\n      e.preventDefault();\n\n      if (props.latch) {\n        props.paths.forEach((p) => {\n          p.vectors.forEach((v) => {\n            if (v.r.id === shape.id) {\n              // This shape is a vector head, latch the vector angle using its point\n              if (\n                Math.abs(shape.rotation) < 0.1 ||\n                Math.abs(shape.rotation - Math.PI) < 0.1\n              ) {\n                shape.translation.set(v.p.translation.x, shape.translation.y);\n              } else if (\n                Math.abs(Math.abs(shape.rotation) - Math.PI / 2) < 0.1 ||\n                Math.abs(shape.rotation - (3 * Math.PI) / 2) < 0.1\n              ) {\n                shape.translation.set(shape.translation.x, v.p.translation.y);\n              }\n            }\n          });\n        });\n      }\n\n      window.removeEventListener(\"mousemove\", drag);\n      window.removeEventListener(\"mouseup\", dragEnd);\n    };\n    var touchEnd = function (e) {\n      e.preventDefault();\n      window.removeEventListener(\"touchmove\", touchDrag);\n      window.removeEventListener(\"touchend\", touchEnd);\n      return false;\n    };\n\n    addNewEventListener(shape._renderer.elem, \"mousedown\", function (e) {\n      e.preventDefault();\n      window.addEventListener(\"mousemove\", drag);\n      window.addEventListener(\"mouseup\", dragEnd);\n    });\n    addNewEventListener(shape._renderer.elem, \"touchstart\", function (e) {\n      e.preventDefault();\n      window.addEventListener(\"touchmove\", touchDrag);\n      window.addEventListener(\"touchend\", touchEnd);\n      return false;\n    });\n  };\n\n  const createAnchorPoint = (anchor, newPath, pathKey, idx) => {\n    let robotSquare;\n    if (pathKey === \"A\" && anchor === newPath._collection[0]) {\n      // put the robot on the first path's start\n      robotSquare = two.current.makeRectangle(\n        anchor.x,\n        anchor.y,\n        (two.current.width / FIELD_METERS) * props.trackWidth,\n        (two.current.width / FIELD_METERS) * props.trackWidth\n      );\n      robotSquare.noFill().stroke = robotColor;\n      robotSquare.linewidth = 2;\n      group.current.add(robotSquare);\n    }\n    const p = two.current.makeCircle(0, 0, 10);\n    const r = two.current.makePolygon(0, 0, 10);\n    r.rotation =\n      Math.atan2(anchor.controls.right.y, anchor.controls.right.x) +\n      Math.PI / 2;\n\n    p.translation.copy(anchor);\n    r.translation.copy(anchor.controls.right).addSelf(anchor);\n    p.noStroke().fill = r.noStroke().fill = editColor;\n\n    const rl = new Two.Path([\n      new Two.Anchor().copy(p.translation),\n      new Two.Anchor().copy(r.translation),\n    ]);\n    rl.noFill().stroke = editColor;\n\n    const g = two.current.makeGroup(rl, p, r);\n    g.translation.addSelf(newPath.translation);\n    group.current.add(g);\n\n    p.translation.bind(Two.Events.change, function () {\n      anchor.copy(this);\n      r.translation.copy(anchor.controls.right).addSelf(this);\n      rl.vertices[0].copy(this);\n      rl.vertices[1].copy(r.translation);\n      if (robotSquare) robotSquare.translation.copy(this);\n      props.setPaths(\n        new Map(\n          props.paths.set(pathKey, {\n            waypoints: props.paths.get(pathKey).waypoints,\n            vectors: props.paths\n              .get(pathKey)\n              .vectors.map((v) =>\n                v.p.id === p.id ? { s: v.s, g: v.g, p: p, r: v.r } : v\n              ),\n            path: props.paths.get(pathKey).path,\n          })\n        )\n      );\n    });\n    r.translation.bind(Two.Events.change, function () {\n      anchor.controls.right.copy(this).subSelf(anchor);\n      rl.vertices[1].copy(this);\n\n      const x = -1 * (anchor.controls.right.x - anchor.x);\n      const y = -1 * (anchor.controls.right.y - anchor.y);\n      const opp = new Two.Vector(x, y);\n      anchor.controls.left.copy(opp).subSelf(anchor);\n\n      const rot =\n        Math.atan2(anchor.controls.right.y, anchor.controls.right.x) +\n        Math.PI / 2;\n      r.rotation = rot;\n      if (robotSquare) robotSquare.rotation = rot;\n      props.setPaths(\n        new Map(\n          props.paths.set(pathKey, {\n            waypoints: props.paths.get(pathKey).waypoints,\n            vectors: props.paths\n              .get(pathKey)\n              .vectors.map((v) =>\n                v.r.id === r.id ? { s: v.s, g: v.g, p: v.p, r: r } : v\n              ),\n            path: props.paths.get(pathKey).path,\n          })\n        )\n      );\n    });\n\n    // Update the renderer in order to generate the actual elements.\n    two.current.update();\n\n    const newVec = { s: robotSquare, g: g, p: p, r: r };\n    let updatedVec;\n    if (idx) {\n      updatedVec = Array.from(props.paths.get(pathKey).vectors);\n      updatedVec.splice(idx, 0, newVec);\n    } else {\n      updatedVec = Array.from(props.paths.get(pathKey).vectors);\n      updatedVec.push(newVec);\n    }\n    props.setPaths(\n      new Map(\n        props.paths.set(pathKey, {\n          waypoints: props.paths.get(pathKey).waypoints,\n          vectors: updatedVec,\n          path: newPath,\n        })\n      )\n    );\n  };\n\n  const drawLine = (anchors) => {\n    const newPath = new Two.Path(anchors, false, true, true);\n    newPath.cap = newPath.join = \"round\";\n    newPath.noFill().stroke = neutralColor;\n    newPath.linewidth = 5;\n    group.current.add(newPath);\n    return newPath;\n  };\n\n  const createPath = (pathKey) => {\n    const anchors = [];\n    const lastPoint = props.paths.get(pathKey)[\"waypoints\"].length - 1;\n    for (let i = lastPoint; i >= 0; --i) {\n      // iterate backwards through points so we are driving the right direction\n      const p = props.paths.get(pathKey).waypoints[i];\n      let anchor;\n      if (i === lastPoint) {\n        anchor = new Two.Anchor(\n          p.translation.x,\n          p.translation.y,\n          0,\n          100,\n          0,\n          -100,\n          \"M\"\n        );\n        anchors.push(anchor);\n      } else {\n        anchor = new Two.Anchor(\n          p.translation.x,\n          p.translation.y,\n          0,\n          100,\n          0,\n          -100,\n          \"C\"\n        );\n        anchors.push(anchor);\n      }\n      two.current.remove(p);\n      two.current.update(); // render the elements before adding interactivity\n    }\n\n    group.current = two.current.makeGroup();\n    const newPath = drawLine(anchors);\n\n    newPath.vertices.forEach(function (anchor) {\n      createAnchorPoint(anchor, newPath, pathKey);\n    });\n  };\n\n  const nextChar = (str) => {\n    return (\n      str.substring(0, str.length - 1) +\n      String.fromCharCode(str.charCodeAt(str.length - 1) + 1)\n    );\n  };\n\n  const curPath = () => {\n    let curKey = \"A\";\n    for (const k of props.paths.keys()) {\n      if (k.charCodeAt(0) > curKey.charCodeAt(0)) {\n        curKey = k;\n      }\n    }\n    return curKey;\n  };\n\n  const placePoints = (e) => {\n    e.preventDefault();\n\n    const cursor = getCursorPosition(e);\n    const point = two.current.makeCircle(cursor.x, cursor.y, 10);\n    point.fill = editColor;\n    if (props.paths.size === 0) {\n      props.setPaths(\n        new Map(\n          props.paths.set(\"A\", {\n            waypoints: [],\n            vectors: [],\n            path: null,\n          })\n        )\n      );\n    }\n    const pathKey = curPath();\n    props.setPaths(\n      new Map(\n        props.paths.set(pathKey, {\n          waypoints: [point, ...props.paths.get(pathKey).waypoints],\n          vectors: props.paths.get(pathKey).vectors,\n          path: props.paths.get(pathKey).path,\n        })\n      )\n    );\n\n    if (props.paths.get(pathKey)[\"waypoints\"].length > 1) {\n      createPath(pathKey);\n      // create the next path's array\n      props.setPaths(\n        new Map(\n          props.paths.set(nextChar(pathKey), {\n            waypoints: [],\n            vectors: [],\n            path: null,\n          })\n        )\n      );\n      props.setMode(\"EDIT\");\n    }\n  };\n\n  const addMidpoint = (path) => {\n    const midpoint = path.path.getPointAt(0.5);\n    const p = two.current.makeCircle(midpoint.x, midpoint.y, 10);\n    const r2 = two.current.makePolygon(0, 0, 10);\n    r2.rotation =\n      Math.atan2(midpoint.controls.right.y, midpoint.controls.right.x) +\n      Math.PI / 2;\n    r2.translation.copy(midpoint.controls.right).addSelf(midpoint);\n    return { p: p, r: r2 };\n  };\n\n  const addNewEventListener = (node, event, handler) => {\n    const listener = { node: node, event: event, handler: handler };\n    for (let i = 0; i < listeners.current.length; ++i) {\n      if (listeners.current[i] === listener) {\n        // the new event is already defined, don't define it again\n        return;\n      }\n    }\n    node.addEventListener(event, handler);\n    listeners.current.push(listener);\n  };\n\n  const removeAllEventListeners = () => {\n    for (let i = 0; i < listeners.current.length; ++i) {\n      const x = listeners.current[i];\n      x?.node?.removeEventListener(x.event, x.handler);\n    }\n    listeners.current = [];\n  };\n\n  const capSize = (newWidth) => {\n    return Math.max(100, Math.min(newWidth, 800));\n  };\n\n  const compSetup = () => {\n    const tile_width = startWidth.current / 6;\n    const field_center = tile_width * 3;\n    const field_top = 0;\n    const field_bot = tile_width * 6;\n    const field_right = tile_width * 6;\n\n    const goal_radius = tile_width / 5;\n    const goal_linewidth = tile_width / 8;\n    const ballRadius = goal_radius - goal_linewidth / 2;\n\n    const blueCenterLeft = two.current.makeCircle(\n      field_center - goal_radius - goal_linewidth - ballRadius,\n      field_center,\n      ballRadius\n    );\n    const blueCenterBot = two.current.makeCircle(\n      field_center,\n      field_center + goal_radius + goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueBotMidCenter = two.current.makeCircle(\n      field_center,\n      tile_width * 4.5,\n      ballRadius\n    );\n    const blueBotCenter = two.current.makeCircle(\n      field_center,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueBotLeft = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueLeftCenter = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      field_center,\n      ballRadius\n    );\n    const blueTopLeft = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueTopRight = two.current.makeCircle(\n      field_right - 2 * goal_linewidth - ballRadius - goal_radius,\n      goal_radius + 2 * goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueBotRight = two.current.makeCircle(\n      field_right - 2 * goal_linewidth - ballRadius - goal_radius,\n      field_bot - goal_radius - 2 * goal_linewidth - ballRadius,\n      ballRadius\n    );\n    blueBalls.current = two.current.makeGroup(\n      blueCenterLeft,\n      blueCenterBot,\n      blueBotMidCenter,\n      blueBotCenter,\n      blueBotLeft,\n      blueLeftCenter,\n      blueTopLeft,\n      blueTopRight,\n      blueBotRight\n    );\n    blueBalls.current.fill = blue;\n\n    const redCenterRight = two.current.makeCircle(\n      field_center + goal_radius + goal_linewidth + ballRadius,\n      field_center,\n      ballRadius\n    );\n    const redCenterTop = two.current.makeCircle(\n      field_center,\n      field_center - goal_radius - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const redTopMidCenter = two.current.makeCircle(\n      field_center,\n      tile_width * 1.5,\n      ballRadius\n    );\n    const redTopCenter = two.current.makeCircle(\n      field_center,\n      field_top + goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const redTopRight = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const redRightCenter = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      field_center,\n      ballRadius\n    );\n    const redBotRight = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const redTopLeft = two.current.makeCircle(\n      2 * goal_linewidth + ballRadius + goal_radius,\n      goal_radius + 2 * goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const redBotLeft = two.current.makeCircle(\n      2 * goal_linewidth + ballRadius + goal_radius,\n      field_bot - goal_radius - 2 * goal_linewidth - ballRadius,\n      ballRadius\n    );\n    redBalls.current = two.current.makeGroup(\n      redCenterRight,\n      redCenterTop,\n      redTopMidCenter,\n      redTopCenter,\n      redTopRight,\n      redRightCenter,\n      redTopRight,\n      redBotRight,\n      redTopLeft,\n      redBotLeft\n    );\n    redBalls.current.fill = red;\n  };\n\n  const skillsSetup = () => {\n    const tile_width = startWidth.current / 6;\n    const field_center = tile_width * 3;\n    const field_top = 0;\n    const field_bot = tile_width * 6;\n    const field_right = tile_width * 6;\n\n    const goal_radius = tile_width / 5;\n    const goal_linewidth = tile_width / 8;\n    const ballRadius = goal_radius - goal_linewidth / 2;\n\n    const blueCenter = two.current.makeCircle(\n      field_center,\n      field_center,\n      ballRadius\n    );\n    const blueBotCenter = two.current.makeCircle(\n      field_center,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueTopCenter = two.current.makeCircle(\n      field_center,\n      field_top + goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueBotLeft = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueLeftCenter = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      field_center,\n      ballRadius\n    );\n    const blueTopLeft = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueTopRight = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueBotRight = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueRightCenter = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      field_center,\n      ballRadius\n    );\n    blueBalls.current = two.current.makeGroup(\n      blueCenter,\n      blueBotCenter,\n      blueTopCenter,\n      blueBotLeft,\n      blueLeftCenter,\n      blueTopLeft,\n      blueTopRight,\n      blueBotRight,\n      blueRightCenter\n    );\n    blueBalls.current.fill = blue;\n\n    const redCenterRight = two.current.makeCircle(\n      tile_width * 4,\n      field_center,\n      ballRadius\n    );\n    const redCenterLeft = two.current.makeCircle(\n      tile_width * 2,\n      field_center,\n      ballRadius\n    );\n    const redCenterTop = two.current.makeCircle(\n      field_center,\n      tile_width * 2,\n      ballRadius\n    );\n    const redTopMidCenter = two.current.makeCircle(\n      field_center,\n      tile_width * 1,\n      ballRadius\n    );\n    const redCenterBot = two.current.makeCircle(\n      field_center,\n      tile_width * 4,\n      ballRadius\n    );\n    const redBotMidCenter = two.current.makeCircle(\n      field_center,\n      tile_width * 5,\n      ballRadius\n    );\n    const redTopLeft = two.current.makeCircle(\n      tile_width * 1.5,\n      ballRadius,\n      ballRadius\n    );\n    const redBotLeft = two.current.makeCircle(\n      tile_width * 1.5,\n      field_bot - ballRadius,\n      ballRadius\n    );\n    const redTopRight = two.current.makeCircle(\n      tile_width * 4.5,\n      ballRadius,\n      ballRadius\n    );\n    const redBotRight = two.current.makeCircle(\n      tile_width * 4.5,\n      field_bot - ballRadius,\n      ballRadius\n    );\n    const redTopCenterLeft = two.current.makeCircle(\n      tile_width,\n      tile_width * 1.5,\n      ballRadius\n    );\n    const redBotCenterLeft = two.current.makeCircle(\n      tile_width,\n      tile_width * 4.5,\n      ballRadius\n    );\n    const redTopCenterRight = two.current.makeCircle(\n      tile_width * 5,\n      tile_width * 1.5,\n      ballRadius\n    );\n    const redBotCenterRight = two.current.makeCircle(\n      tile_width * 5,\n      tile_width * 4.5,\n      ballRadius\n    );\n    redBalls.current = two.current.makeGroup(\n      redCenterRight,\n      redCenterTop,\n      redTopMidCenter,\n      redTopLeft,\n      redBotLeft,\n      redTopRight,\n      redBotRight,\n      redCenterBot,\n      redBotMidCenter,\n      redCenterLeft,\n      redTopCenterLeft,\n      redBotCenterLeft,\n      redTopCenterRight,\n      redBotCenterRight\n    );\n    redBalls.current.fill = red;\n  };\n\n  const resize = useCallback(\n    (width) => {\n      width = capSize(width);\n      two.current.scene.scale = width / startWidth.current;\n      two.current.renderer.setSize(width, width);\n      setCanvasDims({ x: startWidth.current, y: startWidth.current });\n    },\n    [two, setCanvasDims]\n  );\n\n  /**\n   * Sets up the field when the component is mounted.\n   */\n  useEffect(() => {\n    const rand_gray = () => {\n      var value = Math.random() * 0xf + 0x50;\n      var grayscale = (value << 16) | (value << 8) | value;\n      return \"#\" + grayscale.toString(16);\n    };\n\n    const field_tiles = (two, bg, tile_width) => {\n      for (var i = 0; i < 6; i++) {\n        var x = tile_width * (i + 0.5);\n        for (var j = 0; j < 6; j++) {\n          var y = tile_width * (j + 0.5);\n          var rec = two.current.makeRectangle(x, y, tile_width, tile_width);\n          rec.fill = rand_gray();\n          bg.add(rec);\n        }\n      }\n    };\n\n    const field = () => {\n      const tile_width = two.current.width / 6;\n      const field_center = tile_width * 3;\n      const field_top = 0;\n      const field_bot = tile_width * 6;\n      const field_right = tile_width * 6;\n\n      const goal_radius = tile_width / 5;\n      const goal_linewidth = tile_width / 8;\n      const goal_fill = \"none\";\n      const goal_stroke = \"rgb(0, 0, 0)\";\n\n      const double_line_space = tile_width / 8;\n      const line_width = tile_width / 12;\n\n      var background = two.current.makeGroup([]);\n      field_tiles(two, background, tile_width);\n\n      var left_autonline = two.current.makeLine(\n        field_center - double_line_space,\n        field_top,\n        field_center - double_line_space,\n        field_bot\n      );\n\n      var right_autonline = two.current.makeLine(\n        field_center + double_line_space,\n        field_top,\n        field_center + double_line_space,\n        field_bot\n      );\n\n      var left_line = two.current.makeLine(\n        tile_width,\n        field_top,\n        tile_width,\n        field_bot\n      );\n\n      var right_line = two.current.makeLine(\n        tile_width * 5,\n        field_top,\n        tile_width * 5,\n        field_bot\n      );\n\n      var leftdoubletop_line = two.current.makeLine(\n        0,\n        field_center - double_line_space,\n        tile_width,\n        field_center - double_line_space\n      );\n\n      var leftdoublebot_line = two.current.makeLine(\n        0,\n        field_center + double_line_space,\n        tile_width,\n        field_center + double_line_space\n      );\n\n      var rightdoubletop_line = two.current.makeLine(\n        tile_width * 5,\n        field_center - double_line_space,\n        tile_width * 6,\n        field_center - double_line_space\n      );\n\n      var rightdoublebot_line = two.current.makeLine(\n        tile_width * 5,\n        field_center + double_line_space,\n        tile_width * 6,\n        field_center + double_line_space\n      );\n\n      var lines = two.current.makeGroup([\n        left_autonline,\n        right_autonline,\n        left_line,\n        right_line,\n        leftdoubletop_line,\n        leftdoublebot_line,\n        rightdoublebot_line,\n        rightdoubletop_line,\n      ]);\n      lines.linewidth = line_width;\n      lines.stroke = \"#fff\";\n\n      var topcenter_goal = two.current.makeCircle(\n        field_center,\n        goal_radius + goal_linewidth / 2,\n        goal_radius\n      );\n\n      var topleft_goal = two.current.makeCircle(\n        goal_radius + goal_linewidth / 2,\n        goal_radius + goal_linewidth / 2,\n        goal_radius\n      );\n\n      var topright_goal = two.current.makeCircle(\n        field_right - goal_radius - goal_linewidth / 2,\n        goal_radius + goal_linewidth / 2,\n        goal_radius\n      );\n\n      var leftcenter_goal = two.current.makeCircle(\n        goal_radius + goal_linewidth / 2,\n        field_center,\n        goal_radius\n      );\n\n      var center_goal = two.current.makeCircle(\n        field_center,\n        field_center,\n        goal_radius\n      );\n\n      var rightcenter_goal = two.current.makeCircle(\n        field_right - goal_radius - goal_linewidth / 2,\n        field_center,\n        goal_radius\n      );\n\n      var botleft_goal = two.current.makeCircle(\n        goal_radius + goal_linewidth / 2,\n        field_bot - goal_radius - goal_linewidth / 2,\n        goal_radius\n      );\n\n      var botcenter_goal = two.current.makeCircle(\n        field_center,\n        field_bot - goal_radius - goal_linewidth / 2,\n        goal_radius\n      );\n\n      var botright_goal = two.current.makeCircle(\n        field_right - goal_radius - goal_linewidth / 2,\n        field_bot - goal_radius - goal_linewidth / 2,\n        goal_radius\n      );\n\n      var goals = two.current.makeGroup([\n        topleft_goal,\n        topcenter_goal,\n        topright_goal,\n        leftcenter_goal,\n        center_goal,\n        rightcenter_goal,\n        botleft_goal,\n        botcenter_goal,\n        botright_goal,\n      ]);\n      goals.fill = goal_fill;\n      goals.stroke = goal_stroke;\n      goals.linewidth = goal_linewidth;\n    };\n\n    const newWidth = mount.current.getBoundingClientRect().width;\n    startWidth.current = capSize(newWidth);\n    if (!two.current) {\n      two.current = new Two({\n        width: startWidth.current,\n        height: startWidth.current,\n        autostart: true,\n      }).appendTo(mount.current);\n      two.current.makeGroup();\n    }\n\n    field();\n\n    window.addEventListener(\"resize\", () => {\n      savedBoundingRect.current = mount.current.getBoundingClientRect();\n      const newWidth = savedBoundingRect.current.width;\n      resize(newWidth);\n    });\n  }, [resize]);\n\n  /**\n   * Resizes the Two.js canvas each time the component updates.\n   */\n  useEffect(() => {\n    if (savedBoundingRect.current === null) {\n      // we have not yet saved a box size, store it\n      // We're storing the bounding client width because it updates out of\n      // sync with the Material UI drawer\n      savedBoundingRect.current = mount.current.getBoundingClientRect();\n    }\n    const boxWidth = savedBoundingRect.current.width;\n    if (open) {\n      savedLeft.current = drawerWidth;\n      resize(boxWidth - drawerWidth);\n    } else {\n      savedLeft.current = 0;\n      resize(boxWidth);\n    }\n  }, [open, drawerWidth, resize]);\n\n  /**\n   * Handles the State Machine for the edit modes.\n   */\n  useEffect(() => {\n    if (props.mode === prevMode.current && props.latch === prevLatch.current) {\n      // The below state machine only operates on the state transitions\n      return;\n    }\n\n    switch (props.mode) {\n      case \"ADD_PATH\":\n        removeAllEventListeners();\n        props.paths.forEach((p) => {\n          if (!p.path) return;\n          p.path.stroke = neutralColor;\n          p.vectors.forEach((v) => {\n            v.p.fill = neutralColor;\n            v.r.fill = neutralColor;\n          });\n        });\n        addNewEventListener(mount.current, \"click\", placePoints);\n        break;\n      case \"EDIT\":\n        removeAllEventListeners();\n\n        props.paths.forEach((p) => {\n          if (!p.path) return;\n          p.path.stroke = p.path.stroke === red ? red : neutralColor;\n          p.vectors.forEach((v) => {\n            addInteractivity(v.p);\n            addInteractivity(v.r);\n\n            v.p.fill = editColor;\n            v.r.fill = editColor;\n          });\n        });\n        break;\n      case \"ADD_POINTS\":\n        removeAllEventListeners();\n\n        props.paths.forEach((p, key, map) => {\n          if (!p.path) return;\n\n          p.vectors.forEach((v) => {\n            v.p.fill = neutralColor;\n            v.r.fill = neutralColor;\n          });\n          p.path.stroke = editColor;\n\n          addNewEventListener(p.path._renderer.elem, \"click\", (e) => {\n            const newVec = addMidpoint(p);\n            const anchor = new Two.Anchor(\n              newVec.p.translation.x,\n              newVec.p.translation.y,\n              100 * Math.cos(newVec.r.rotation + Math.PI / 2),\n              100 * Math.sin(newVec.r.rotation + Math.PI / 2),\n              -100 * Math.cos(newVec.r.rotation + Math.PI / 2),\n              -100 * Math.sin(newVec.r.rotation + Math.PI / 2),\n              \"C\"\n            );\n            const anchors = p.path.vertices;\n            anchors.splice(1, 0, anchor); // insert anchor in the middle\n            const newPath = drawLine(anchors);\n            p.path = newPath;\n\n            two.current.remove(newVec.p, newVec.r);\n            createAnchorPoint(anchor, p.path, key, p.vectors.length - 1);\n            props.setMode(\"EDIT\");\n          });\n        });\n        break;\n      case \"REMOVE_POINTS\":\n        removeAllEventListeners();\n\n        props.paths.forEach((p, key, map) => {\n          if (!p.path) return;\n\n          p.vectors.forEach((v) => {\n            v.p.fill = neutralColor;\n            v.r.fill = neutralColor;\n          });\n          p.path.stroke = editColor;\n\n          addNewEventListener(p.path._renderer.elem, \"click\", (e) => {\n            const anchors = p.path.vertices;\n            anchors.pop();\n            if (anchors.length < 2) {\n              p.vectors.forEach((v) => {\n                v.g.remove();\n                if (v.s) group.current.remove(v.s);\n              });\n              two.current.remove(p.path);\n              props.paths.delete(key);\n              props.setPaths(new Map(props.paths));\n            } else {\n              const vec = p.vectors.pop();\n              vec.g.remove();\n              const newPath = drawLine(anchors);\n              p.path = newPath;\n              two.current.update();\n              props.setPaths(new Map(map.set(key, p)));\n            }\n          });\n        });\n        break;\n      default:\n        break;\n    }\n    prevMode.current = props.mode;\n  });\n\n  /**\n   * Handle the field state\n   */\n  useEffect(() => {\n    if (props.field === prevField.current) {\n      // The below state machine only operates on the state transitions\n      return;\n    }\n\n    blueBalls.current?.remove();\n    redBalls.current?.remove();\n\n    switch (props.field) {\n      case \"COMP\":\n        compSetup();\n        break;\n      case \"SKILLS\":\n        skillsSetup();\n        break;\n      case \"NONE\":\n      default:\n        break;\n    }\n    prevField.current = props.field;\n  });\n\n  useEffect(() => {\n    paths.forEach((v, k) => {\n      console.log(v);\n      if (badPaths.get(k) === 1) {\n        // this path is bad!\n        v.path.stroke = red;\n      } else if (v.path) {\n        v.path.stroke = neutralColor;\n      }\n    });\n    two.current.update();\n  }, [paths, badPaths]);\n\n  return <div ref={mount}></div>;\n};\n","import { FIELD_METERS } from \"./units\";\n\nexport const squigglesCoords = (\n  canvasX: number,\n  canvasY: number,\n  x: number,\n  y: number,\n  yaw: number,\n  vel?: number\n) => ({\n  // TODO: check if the starting position is top left\n  // Make (0, 0) be the bottom left, then X is up and Y is right for Okapi\n  x: (x / canvasX) * FIELD_METERS,\n  y: (1 - y / canvasY) * FIELD_METERS,\n  yaw: -1 * (yaw + Math.PI / 2),\n  vel: vel\n    ? (vel / Math.sqrt(Math.pow(canvasX, 2) + Math.pow(canvasY, 2))) *\n      FIELD_METERS\n    : 0,\n});\n\nexport const okapiCoords = (\n  canvasX: number,\n  canvasY: number,\n  x: number,\n  y: number,\n  yaw: number\n) => ({\n  // TODO: check if the starting position is top left\n  // Make (0, 0) be the bottom left, then X is up and Y is right for Okapi\n  x: (1 - y / canvasY) * FIELD_METERS,\n  y: (x / canvasX) * FIELD_METERS,\n  yaw: yaw,\n});\n","import React from \"react\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Box from \"@material-ui/core/Box\";\nimport { CopyBlock, atomOneDark } from \"react-code-blocks\";\n\nimport { squigglesCoords, okapiCoords } from \"../services/coords\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box\n          pt={2}\n          p={1}\n          style={{ backgroundColor: \"#282c34\" /* match the OneDark bg */ }}\n        >\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    maxWidth: 800,\n  },\n}));\n\nexport interface CanvasDims {\n  x: number;\n  y: number;\n}\nexport interface SimpleTabsProps {\n  paths: Map<string, any>;\n  trackWidth: string;\n  maxVel: string;\n  maxAccel: string;\n  maxJerk: string;\n  canvasDims: CanvasDims;\n}\n\nexport default function SimpleTabs(props: SimpleTabsProps) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const squigglesCode = () => {\n    let out = \"#define PATH_DT             (0.01)\\n\";\n    out += `#define PATH_MAX_VEL        (${props.maxVel})\\n`;\n    out += `#define PATH_MAX_ACCEL      (${props.maxAccel})\\n`;\n    out += `#define PATH_MAX_JERK       (${props.maxJerk})\\n`;\n    out += `#define CHASSIS_TRACK_WIDTH (${props.trackWidth})\\n\\n`;\n    out +=\n      \"auto constraints = squiggles::Constraints(PATH_MAX_VEL, PATH_MAX_ACCEL, PATH_MAX_JERK);\\n\";\n    out += `auto model = std::make_shared<squiggles::TankModel>(CHASSIS_TRACK_WIDTH, constraints);\\n`;\n    out +=\n      \"auto generator = squiggles::SplineGenerator(constraints, model, PATH_DT);\\n\\n\";\n    out += Array.from(props.paths)\n      .slice(0, -1)\n      .map(([k, v]) => {\n        let path = `auto path${k} = generator.generate({\\n`;\n        for (let i = v.vectors.length - 1; i >= 0; --i) {\n          const vec = v.vectors[i];\n          let yaw = vec.r.rotation;\n          const coords = squigglesCoords(\n            props.canvasDims.x,\n            props.canvasDims.y,\n            vec.p.translation.x,\n            vec.p.translation.y,\n            yaw\n          );\n          const x = coords.x;\n          const y = coords.y;\n          yaw = coords.yaw;\n          path += `\\tsquiggles::ControlVector(squiggles::Pose(${x.toFixed(\n            3\n          )}, ${y.toFixed(3)}, ${yaw.toFixed(3)})})`;\n          if (i < v.vectors.length - 1) {\n            path += \",\\n\";\n          } else {\n            path += \"\\n\";\n          }\n        }\n        path += \"});\\n\";\n        return path;\n      })\n      .join(\"\");\n    return out;\n  };\n\n  const okapiCode = () => {\n    let out = \"// TODO: Fill in the info below for your robot\\n\";\n    out += \"#define LEFT_CHASSIS_MOTOR_PORTS ({1, 2})\\n\";\n    out += \"#define RIGHT_CHASSIS_MOTOR_PORTS ({3, 4})\\n\";\n    out += \"#define WHEEL_DIAMETER (4_in)\\n\";\n    out +=\n      \"#define CHASSIS_MOTOR_CARTRIDGE (okapi::AbstractMotor::gearset::green)\\n\";\n    out +=\n      \"#define CHASSIS_CARTRIDGE_TICKS (imev5GreenTPR) // Should match above\\n\\n\";\n    out += `#define PATH_MAX_VEL        (${props.maxVel})\\n`;\n    out += `#define PATH_MAX_ACCEL      (${props.maxAccel})\\n`;\n    out += `#define PATH_MAX_JERK       (${props.maxJerk})\\n`;\n    out += `#define CHASSIS_TRACK_WIDTH (${props.trackWidth}_m)\\n\\n`;\n    out += \"auto chassis = okapi::ChassisControllerBuilder()\\n\";\n    out +=\n      \"\\t.withMotors(LEFT_CHASSIS_MOTOR_PORTS, RIGHT_CHASSIS_MOTOR_PORTS)\\n\";\n    out += \"\\t.withDimensions(\\n\";\n    out += \"\\t\\tCHASSIS_MOTOR_CARTRIDGE,\\n\";\n    out +=\n      \"\\t\\t{{WHEEL_DIAMETER, CHASSIS_TRACK_WIDTH}, CHASSIS_CARTRIDGE_TICKS})\\n\";\n    out += \"\\t.build();\\n\";\n    out +=\n      \"auto profileController = okapi::AsyncMotionProfileControllerBuilder()\\n\";\n    out += \"\\t.withLimits({PATH_MAX_VEL, PATH_MAX_ACCEL, PATH_MAX_JERK})\\n\";\n    out += \"\\t.withOutput(chassis)\\n\";\n    out += \"\\t.buildMotionProfileController();\\n\\n\";\n    out += \"/**\\n\";\n    out += \" * The Coordinate System for Okapi Points is:\\n\";\n    out += \" * ^\\n\";\n    out += \" * | x\\n\";\n    out += \" * |    ↷ yaw\\n\";\n    out += \" * |   y\\n\";\n    out += \" * ------>\\n\";\n    out += \" */\\n\";\n    out += Array.from(props.paths)\n      .slice(0, -1)\n      .map(([k, v]) => {\n        let path = \"profileController->generatePath({\\n\";\n        for (let i = v.vectors.length - 1; i >= 0; --i) {\n          const vec = v.vectors[i];\n          let yaw = vec.r.rotation;\n          const coords = okapiCoords(\n            props.canvasDims.x,\n            props.canvasDims.y,\n            vec.p.translation.x,\n            vec.p.translation.y,\n            yaw\n          );\n          const x = coords.x;\n          const y = coords.y;\n          yaw = coords.yaw;\n          path += `\\t{${x.toFixed(3)}_m, ${y.toFixed(3)}_m, ${yaw.toFixed(\n            3\n          )}_rad},\\n`;\n        }\n        path += `\\t\"${k}\"\\n});\\n`;\n        return path;\n      })\n      .join(\"\");\n    return out;\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"simple tabs example\"\n        >\n          <Tab label=\"Okapi\" {...a11yProps(0)} />\n          <Tab label=\"Squiggles\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <CopyBlock\n          text={okapiCode()}\n          language={\"cpp\"}\n          showLineNumbers={true}\n          theme={atomOneDark}\n          codeBlock\n        />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <CopyBlock\n          text={squigglesCode()}\n          language={\"cpp\"}\n          showLineNumbers={true}\n          theme={atomOneDark}\n          codeBlock\n        />\n      </TabPanel>\n    </div>\n  );\n}\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst themeColor = \"rgb(50, 168, 82)\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"rgb(102, 204, 129)\",\n      main: themeColor,\n      dark: themeColor,\n    },\n  },\n  overrides: {\n    MuiToggleButton: {\n      root: {\n        \"&$selected\": {\n          color: \"#fff\",\n          backgroundColor: themeColor,\n        },\n      },\n    },\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport {\n  IconButton,\n  Divider,\n  List,\n  ListItem,\n  Typography,\n  TextField,\n  useTheme,\n  MenuItem,\n  Checkbox,\n  FormControlLabel,\n} from \"@material-ui/core\";\nimport { ToggleButtonGroup, ToggleButton } from \"@material-ui/lab\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    drawerHeader: {\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: \"flex-end\",\n    },\n  })\n);\n\nexport interface SidebarContentProps {\n  handleDrawerClose: () => void;\n  mode: string;\n  setMode: (mode: string) => void;\n  field: string;\n  setField: (field: string) => void;\n  trackWidth: string;\n  setTrackWidth: (trackWidth: string) => void;\n  maxVel: string;\n  setMaxVel: (maxVel: string) => void;\n  maxAccel: string;\n  setMaxAccel: (maxAccel: string) => void;\n  maxJerk: string;\n  setMaxJerk: (maxJerk: string) => void;\n  latch: boolean;\n  setLatch: (latch: boolean) => void;\n}\n\nexport const SidebarContent = (props: SidebarContentProps) => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const seasons = [\"2020-2021 Change Up\"];\n\n  return (\n    <>\n      <div className={classes.drawerHeader}>\n        <IconButton onClick={props.handleDrawerClose}>\n          {theme.direction === \"ltr\" ? (\n            <ChevronLeftIcon />\n          ) : (\n            <ChevronRightIcon />\n          )}\n        </IconButton>\n      </div>\n      <Divider />\n      <List>\n        <ListItem>\n          <Typography variant=\"subtitle1\">Mode</Typography>\n        </ListItem>\n        <ListItem key={\"mode\"}>\n          <ToggleButtonGroup\n            value={props.mode}\n            size=\"small\"\n            exclusive\n            onChange={(e, newMode) => {\n              if (newMode !== null) {\n                props.setMode(newMode);\n              }\n            }}\n            aria-label=\"path add/edit mode\"\n          >\n            <ToggleButton value=\"ADD_PATH\" aria-label=\"left aligned\">\n              ADD PATH\n            </ToggleButton>\n            <ToggleButton value=\"EDIT\" aria-label=\"centered\">\n              MOVE\n            </ToggleButton>\n            <ToggleButton value=\"ADD_POINTS\" aria-label=\"centered\">\n              ADD POINTS\n            </ToggleButton>\n            <ToggleButton value=\"REMOVE_POINTS\" aria-label=\"centered\">\n              REMOVE POINTS\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </ListItem>\n        <ListItem>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={props.latch}\n                onChange={(e) => props.setLatch(e.target.checked)}\n                name=\"Latch\"\n                color=\"primary\"\n              />\n            }\n            label={\"Latch to Cardinal Directions\"}\n          />\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem>\n          <Typography variant=\"subtitle1\">Robot Specs</Typography>\n        </ListItem>\n        <ListItem>\n          {/* TODO: validate that these values are floats */}\n          <TextField\n            variant=\"outlined\"\n            required\n            label=\"Track Width (m)\"\n            value={props.trackWidth}\n            onChange={(e) => props.setTrackWidth(e.target.value)}\n          />\n        </ListItem>\n        <ListItem>\n          <TextField\n            variant=\"outlined\"\n            required\n            label=\"Max Velocity (m/s)\"\n            value={props.maxVel}\n            onChange={(e) => props.setMaxVel(e.target.value)}\n          />\n        </ListItem>\n        <ListItem>\n          <TextField\n            variant=\"outlined\"\n            label=\"Max Acceleration (m/s/s)\"\n            value={props.maxAccel}\n            onChange={(e) => props.setMaxAccel(e.target.value)}\n          />\n        </ListItem>\n        <ListItem>\n          <TextField\n            variant=\"outlined\"\n            label=\"Max Jerk (m/s/s/s)\"\n            value={props.maxJerk}\n            onChange={(e) => props.setMaxJerk(e.target.value)}\n          />\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem>\n          <Typography variant=\"subtitle1\">Field Setup</Typography>\n        </ListItem>\n        <ListItem>\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            id=\"season-select\"\n            select\n            label=\"Comp Season\"\n            defaultValue={seasons[0]}\n          >\n            {seasons.map((s) => (\n              <MenuItem key={s} value={s}>\n                {s}\n              </MenuItem>\n            ))}\n          </TextField>\n        </ListItem>\n        <ListItem>\n          <ToggleButtonGroup\n            value={props.field}\n            exclusive\n            onChange={(e, newField) => {\n              if (newField !== null) {\n                props.setField(newField);\n              }\n            }}\n            aria-label=\"path add/edit mode\"\n          >\n            <ToggleButton value=\"COMP\" aria-label=\"left aligned\">\n              COMP\n            </ToggleButton>\n            <ToggleButton value=\"SKILLS\" aria-label=\"centered\">\n              AUTON\n            </ToggleButton>\n            <ToggleButton value=\"NONE\" aria-label=\"centered\">\n              NONE\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem>\n          <Typography variant=\"subtitle1\">Troubleshooting</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            Paths in red CANNOT be generated by Squiggles. <br />\n            If a path appears in red, try editing your Robot Specs.\n          </Typography>\n        </ListItem>\n      </List>\n    </>\n  );\n};\n","class Squiggles {\n  /**\n   * We will use this method privately to communicate with the worker and\n   * return a promise with the result of the event. This way we can call\n   * the worker asynchronously.\n   */\n  _dispatch(event) {\n    const { msg } = event;\n    this._status[msg] = [\"loading\"];\n    this.worker.postMessage(event);\n    return new Promise((res, rej) => {\n      let interval = setInterval(() => {\n        const status = this._status[msg];\n        if (status[0] === \"done\") res(status[1]);\n        if (status[0] === \"error\") rej(status[1]);\n        if (status[0] !== \"loading\") {\n          delete this._status[msg];\n          clearInterval(interval);\n        }\n      }, 50);\n    });\n  }\n\n  /**\n   * First, we will load the worker and we will capture the onmessage\n   * and onerror events to know at all times the status of the event\n   * we have triggered.\n   *\n   * Then, we are going to call the 'load' event, as we've just\n   * implemented it so that the worker can capture it.\n   */\n  load() {\n    this._status = {};\n    this.worker = new Worker(\"robotsquiggles/js/squiggles.worker.js\"); // load worker\n\n    // Capture events and save [status, event] inside the _status object\n    this.worker.onmessage = (e) => (this._status[e.data.msg] = [\"done\", e]);\n    this.worker.onerror = (e) => (this._status[e?.data?.msg] = [\"error\", e]);\n    return this._dispatch({ msg: \"load\" });\n  }\n\n  /**\n   * We are going to use the _dispatch event that we created before to\n   * call the postMessage with the msg and the image as payload.\n   *\n   * Thanks to what we have implemented in the _dispatch, this will\n   * return a promise with the squiggles result.\n   */\n  test() {\n    console.log(\"service\");\n    return this._dispatch({ msg: \"asdfghjkl\" });\n  }\n\n  generate(payload) {\n    return this._dispatch({ msg: \"generate\", payload });\n  }\n}\n\n// Export the same instant everywhere\nexport default new Squiggles();\n","import React, { useEffect, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { DrawNewPath } from \"./components\";\nimport SimpleTabs from \"./components/generated\";\nimport { ThemeProvider, Button } from \"@material-ui/core\";\nimport theme from \"./theme\";\nimport { SidebarContent } from \"./components/sidebar\";\nimport squiggles from \"./services/squiggles\";\nimport { useDebouncedEffect } from \"./services/useDebouncedEffect\";\nimport { squigglesCoords } from \"./services/coords\";\n\nconst drawerWidth = 300;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n    },\n    appBar: {\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    hide: {\n      display: \"none\",\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerHeader: {\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: \"flex-end\",\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -drawerWidth,\n      overflow: \"hidden\",\n    },\n    contentShift: {\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n  })\n);\n\nexport const App = (props: any) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false); // setting this to true breaks the alignment of two.js\n  const [mode, setMode] = useState(\"ADD_PATH\");\n  const [latch, setLatch] = useState(true);\n  const [field, setField] = useState(\"NONE\");\n  const [trackWidth, setTrackWidth] = useState(\"0.45\");\n  const [maxVel, setMaxVel] = useState(\"1.0\");\n  const [maxAccel, setMaxAccel] = useState(\"2.0\");\n  const [maxJerk, setMaxJerk] = useState(\"10.0\");\n  const [canvasDims, setCanvasDims] = useState({\n    x: window.innerWidth,\n    y: window.innerHeight,\n  });\n  const [badPaths, setBadPaths] = useState(new Map<string, number>());\n\n  /**\n   * Map of the data associated with each Squiggles path.\n   *\n   * Of the form:\n   *\n   * \"A\": {\n   *   \"waypoints\": <Two.Circle>[],\n   *   \"vectors\": <Two.Vector>[],\n   *   \"path\": Two.Path\n   * }\n   */\n  const [paths, setPaths] = useState(new Map());\n\n  useDebouncedEffect(\n    () => {\n      paths.forEach((v: any, k: string) => {\n        if (!v.waypoints[1] || !v.vectors[1] || v.vectors.length > 2) return;\n        // TODO: allow for three+ point paths\n        const poses = [];\n        for (let i = v.vectors.length - 1; i >= 0; --i) {\n          const vec = v.vectors[i];\n          let yaw = vec.r.rotation;\n          let vel = Math.sqrt(\n            Math.pow(vec.r.translation.x - vec.p.translation.x, 2) +\n              Math.pow(vec.r.translation.y - vec.p.translation.y, 2)\n          );\n          const coords = squigglesCoords(\n            canvasDims.x,\n            canvasDims.y,\n            vec.p.translation.x,\n            vec.p.translation.y,\n            yaw,\n            vel\n          );\n          poses.push({\n            x: coords.x,\n            y: coords.y,\n            yaw: coords.yaw,\n            vel: coords.vel,\n          });\n        }\n        const payload = {\n          sx: poses[0].x,\n          sy: poses[0].y,\n          syaw: poses[0].yaw,\n          sv: poses[0].vel,\n          gx: poses[1].x,\n          gy: poses[1].y,\n          gyaw: poses[1].yaw,\n          gv: poses[1].vel,\n          max_vel: parseFloat(maxVel),\n          max_accel: parseFloat(maxAccel),\n          max_jerk: parseFloat(maxJerk),\n          track_width: parseFloat(trackWidth),\n        };\n        generatePath(k, payload);\n      });\n    },\n    200,\n    [paths, maxVel, maxAccel, maxJerk, trackWidth]\n  );\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  async function generatePath(path: string, payload: any) {\n    const rtn = await squiggles.generate(payload);\n    setBadPaths(new Map(badPaths.set(path, rtn.data.payload)));\n  }\n\n  // Load the Squiggles WASM library only when the component is mounted\n  useEffect(() => {\n    squiggles.load();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar\n          position=\"fixed\"\n          className={clsx(classes.appBar, {\n            [classes.appBarShift]: open,\n          })}\n        >\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, open && classes.hide)}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap className={classes.title}>\n              Squiggles Drawing Board\n            </Typography>\n            <Button href=\"https://squiggles.readthedocs.io\" color=\"inherit\">\n              DOCS\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={open}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <SidebarContent\n            handleDrawerClose={handleDrawerClose}\n            mode={mode}\n            setMode={setMode}\n            field={field}\n            setField={setField}\n            trackWidth={trackWidth}\n            setTrackWidth={setTrackWidth}\n            maxVel={maxVel}\n            setMaxVel={setMaxVel}\n            maxAccel={maxAccel}\n            setMaxAccel={setMaxAccel}\n            maxJerk={maxJerk}\n            setMaxJerk={setMaxJerk}\n            latch={latch}\n            setLatch={setLatch}\n          />\n        </Drawer>\n        <main\n          className={clsx(classes.content, {\n            [classes.contentShift]: open,\n          })}\n        >\n          <div className={classes.drawerHeader} />\n          <DrawNewPath\n            drawerWidth={drawerWidth}\n            open={open}\n            mode={mode}\n            setMode={setMode}\n            field={field}\n            paths={paths}\n            setPaths={setPaths}\n            setCanvasDims={setCanvasDims}\n            latch={latch}\n            trackWidth={trackWidth}\n            badPaths={badPaths}\n          />\n          <SimpleTabs\n            paths={paths}\n            trackWidth={trackWidth}\n            maxVel={maxVel}\n            maxAccel={maxAccel}\n            maxJerk={maxJerk}\n            canvasDims={canvasDims}\n          />\n        </main>\n      </div>\n    </ThemeProvider>\n  );\n};\n","import { useCallback, useEffect } from \"react\";\n\nexport const useDebouncedEffect = (effect, delay, deps) => {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const callback = useCallback(effect, deps);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      callback();\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [callback, delay]);\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./app\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}