{"version":3,"sources":["components/redux/index.ts","services/units.ts","components/field.jsx","components/new_path.jsx","services/coords.ts","components/generated.tsx","theme.js","components/sidebar.tsx","services/squiggles.js","app.tsx","services/useDebouncedEffect.js","reportWebVitals.ts","components/redux/store.ts","index.tsx","components/redux/slice.ts"],"names":["FIELD_METERS","Field","props","blue","red","blueBalls","useRef","redBalls","prevField","two","startWidth","mount","savedBoundingRect","capSize","resize","field","useEffect","rand_gray","value","Math","random","toString","newWidth","current","getBoundingClientRect","width","Two","height","autostart","appendTo","makeGroup","tile_width","field_center","field_bot","field_right","goal_radius","goal_linewidth","double_line_space","line_width","background","bg","i","x","j","y","rec","makeRectangle","fill","add","field_tiles","left_autonline","makeLine","right_autonline","left_line","right_line","leftdoubletop_line","leftdoublebot_line","rightdoubletop_line","rightdoublebot_line","lines","linewidth","stroke","topcenter_goal","makeCircle","topleft_goal","topright_goal","leftcenter_goal","center_goal","rightcenter_goal","botleft_goal","botcenter_goal","botright_goal","goals","window","addEventListener","remove","ballRadius","blueCenterLeft","blueCenterBot","blueBotMidCenter","blueBotCenter","blueBotLeft","blueLeftCenter","blueTopLeft","blueTopRight","blueBotRight","redCenterRight","redCenterTop","redTopMidCenter","redTopCenter","redTopRight","redRightCenter","redBotRight","redTopLeft","redBotLeft","compSetup","blueCenter","blueTopCenter","blueRightCenter","redCenterLeft","redCenterBot","redBotMidCenter","redTopCenterLeft","redBotCenterLeft","redTopCenterRight","redBotCenterRight","skillsSetup","DrawNewPath","group","savedLeft","prevMode","prevLatch","listeners","theme","useTheme","neutralColor","editColor","palette","primary","main","robotColor","light","robotSquare","drawerWidth","open","mode","setMode","setCanvasDims","latch","trackWidth","badPaths","dispatch","useDispatch","paths","useSelector","selectPaths","pathsAction","selectPathsAction","getCursorPosition","e","clientX","pageXOffset","clientY","pageYOffset","left","top","scene","scale","addInteractivity","shape","offset","translation","drag","preventDefault","cursor","set","touchDrag","touch","originalEvent","changedTouches","pageX","pageY","dragEnd","Object","entries","forEach","val","k","p","vectors","v","v_p","getById","id","val2","p2","path","v2","v2_p","dist","sqrt","pow","point","updateVectorP","pathKey","r","abs","rotation","PI","yaw","updateVectorR","removeEventListener","touchEnd","addNewEventListener","_renderer","elem","console","log","createAnchorPoint","useCallback","anchor","newPath","idx","_collection","noFill","makePolygon","atan2","controls","right","copy","addSelf","noStroke","rl","Path","Anchor","g","bind","Events","change","this","vertices","subSelf","opp","Vector","rot","update","gPoint","pPoint","rPoint","s","drawLine","anchors","cap","join","createNewPath","lastPoint","waypoints","length","push","createPath","curPathKey","initNextPath","nextChar","placePoints","writePoint","createPoints","node","event","handler","listener","removeAllEventListeners","max","min","renderer","setSize","boxWidth","key","midpoint","getPointAt","cos","sin","splice","newVec","splicePoint","vector","pop","deletePath","vec","deletePoint","get","ref","squigglesCoords","canvasX","canvasY","vel","okapiCoords","TabPanel","children","index","other","role","hidden","aria-labelledby","Box","pt","style","backgroundColor","a11yProps","useStyles","makeStyles","root","flexGrow","paper","maxWidth","SimpleTabs","classes","React","useState","setValue","maxVel","maxAccel","maxJerk","canvasDims","className","AppBar","position","Tabs","onChange","newValue","aria-label","Tab","label","text","out","Array","from","slice","map","coords","toFixed","okapiCode","language","showLineNumbers","atomOneDark","codeBlock","squigglesCode","themeColor","createMuiTheme","dark","overrides","MuiToggleButton","color","createStyles","drawerHeader","display","alignItems","padding","spacing","mixins","toolbar","justifyContent","SidebarContent","seasons","IconButton","onClick","handleDrawerClose","direction","Divider","List","ListItem","Typography","variant","ToggleButtonGroup","size","exclusive","newMode","ToggleButton","FormControlLabel","control","Checkbox","checked","setLatch","target","name","TextField","required","setTrackWidth","setMaxVel","setMaxAccel","setMaxJerk","fullWidth","select","defaultValue","MenuItem","newField","setField","msg","_status","worker","postMessage","Promise","res","rej","interval","setInterval","status","clearInterval","Worker","onmessage","data","onerror","_dispatch","payload","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","title","docs","fontWeight","letterSpacing","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","content","overflow","contentShift","App","setOpen","innerWidth","innerHeight","Map","setBadPaths","effect","delay","deps","callback","setTimeout","clearTimeout","useDebouncedEffect","poses","generatePath","sx","sy","syaw","sv","gx","gy","gyaw","gv","max_vel","parseFloat","max_accel","max_jerk","track_width","a","squiggles","generate","rtn","load","ThemeProvider","CssBaseline","clsx","Toolbar","edge","noWrap","Button","href","Drawer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","pathsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActionPaths","ignoredPaths","concat","logger","ReactDOM","render","StrictMode","document","getElementById","str","substring","String","fromCharCode","charCodeAt","state","curKey","keys","pathsSlice","createSlice","initialState","reducers","action","actionNeeded","undefined","initPath","nextPath","_initPath","addPoint","actions"],"mappings":"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","file":"static/js/main.dc313b40.chunk.js","sourcesContent":["export * from \"./slice\";\nexport * from \"./state\";\n","export const FIELD_METERS = 3.6576;\n","import { useRef, useEffect } from \"react\";\nimport Two from \"two.js\";\n\nexport const Field = (props) => {\n  const blue = \"rgb(70, 70, 255)\";\n  const red = \"rgb(255, 40, 40)\";\n\n  const blueBalls = useRef(null);\n  const redBalls = useRef(null);\n  const prevField = useRef(null);\n\n  const {\n    two,\n    startWidth,\n    mount,\n    savedBoundingRect,\n    capSize,\n    resize,\n    field,\n  } = props;\n\n  const compSetup = () => {\n    const tile_width = startWidth.current / 6;\n    const field_center = tile_width * 3;\n    const field_top = 0;\n    const field_bot = tile_width * 6;\n    const field_right = tile_width * 6;\n\n    const goal_radius = tile_width / 5;\n    const goal_linewidth = tile_width / 8;\n    const ballRadius = goal_radius - goal_linewidth / 2;\n\n    const blueCenterLeft = two.current.makeCircle(\n      field_center - goal_radius - goal_linewidth - ballRadius,\n      field_center,\n      ballRadius\n    );\n    const blueCenterBot = two.current.makeCircle(\n      field_center,\n      field_center + goal_radius + goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueBotMidCenter = two.current.makeCircle(\n      field_center,\n      tile_width * 4.5,\n      ballRadius\n    );\n    const blueBotCenter = two.current.makeCircle(\n      field_center,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueBotLeft = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueLeftCenter = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      field_center,\n      ballRadius\n    );\n    const blueTopLeft = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueTopRight = two.current.makeCircle(\n      field_right - 2 * goal_linewidth - ballRadius - goal_radius,\n      goal_radius + 2 * goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueBotRight = two.current.makeCircle(\n      field_right - 2 * goal_linewidth - ballRadius - goal_radius,\n      field_bot - goal_radius - 2 * goal_linewidth - ballRadius,\n      ballRadius\n    );\n    blueBalls.current = two.current.makeGroup(\n      blueCenterLeft,\n      blueCenterBot,\n      blueBotMidCenter,\n      blueBotCenter,\n      blueBotLeft,\n      blueLeftCenter,\n      blueTopLeft,\n      blueTopRight,\n      blueBotRight\n    );\n    blueBalls.current.fill = blue;\n\n    const redCenterRight = two.current.makeCircle(\n      field_center + goal_radius + goal_linewidth + ballRadius,\n      field_center,\n      ballRadius\n    );\n    const redCenterTop = two.current.makeCircle(\n      field_center,\n      field_center - goal_radius - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const redTopMidCenter = two.current.makeCircle(\n      field_center,\n      tile_width * 1.5,\n      ballRadius\n    );\n    const redTopCenter = two.current.makeCircle(\n      field_center,\n      field_top + goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const redTopRight = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const redRightCenter = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      field_center,\n      ballRadius\n    );\n    const redBotRight = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const redTopLeft = two.current.makeCircle(\n      2 * goal_linewidth + ballRadius + goal_radius,\n      goal_radius + 2 * goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const redBotLeft = two.current.makeCircle(\n      2 * goal_linewidth + ballRadius + goal_radius,\n      field_bot - goal_radius - 2 * goal_linewidth - ballRadius,\n      ballRadius\n    );\n    redBalls.current = two.current.makeGroup(\n      redCenterRight,\n      redCenterTop,\n      redTopMidCenter,\n      redTopCenter,\n      redTopRight,\n      redRightCenter,\n      redTopRight,\n      redBotRight,\n      redTopLeft,\n      redBotLeft\n    );\n    redBalls.current.fill = red;\n  };\n\n  const skillsSetup = () => {\n    const tile_width = startWidth.current / 6;\n    const field_center = tile_width * 3;\n    const field_top = 0;\n    const field_bot = tile_width * 6;\n    const field_right = tile_width * 6;\n\n    const goal_radius = tile_width / 5;\n    const goal_linewidth = tile_width / 8;\n    const ballRadius = goal_radius - goal_linewidth / 2;\n\n    const blueCenter = two.current.makeCircle(\n      field_center,\n      field_center,\n      ballRadius\n    );\n    const blueBotCenter = two.current.makeCircle(\n      field_center,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueTopCenter = two.current.makeCircle(\n      field_center,\n      field_top + goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueBotLeft = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueLeftCenter = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      field_center,\n      ballRadius\n    );\n    const blueTopLeft = two.current.makeCircle(\n      goal_linewidth + ballRadius,\n      goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueTopRight = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      goal_linewidth + ballRadius,\n      ballRadius\n    );\n    const blueBotRight = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      field_bot - goal_linewidth - ballRadius,\n      ballRadius\n    );\n    const blueRightCenter = two.current.makeCircle(\n      field_right - goal_linewidth - ballRadius,\n      field_center,\n      ballRadius\n    );\n    blueBalls.current = two.current.makeGroup(\n      blueCenter,\n      blueBotCenter,\n      blueTopCenter,\n      blueBotLeft,\n      blueLeftCenter,\n      blueTopLeft,\n      blueTopRight,\n      blueBotRight,\n      blueRightCenter\n    );\n    blueBalls.current.fill = blue;\n\n    const redCenterRight = two.current.makeCircle(\n      tile_width * 4,\n      field_center,\n      ballRadius\n    );\n    const redCenterLeft = two.current.makeCircle(\n      tile_width * 2,\n      field_center,\n      ballRadius\n    );\n    const redCenterTop = two.current.makeCircle(\n      field_center,\n      tile_width * 2,\n      ballRadius\n    );\n    const redTopMidCenter = two.current.makeCircle(\n      field_center,\n      tile_width * 1,\n      ballRadius\n    );\n    const redCenterBot = two.current.makeCircle(\n      field_center,\n      tile_width * 4,\n      ballRadius\n    );\n    const redBotMidCenter = two.current.makeCircle(\n      field_center,\n      tile_width * 5,\n      ballRadius\n    );\n    const redTopLeft = two.current.makeCircle(\n      tile_width * 1.5,\n      ballRadius,\n      ballRadius\n    );\n    const redBotLeft = two.current.makeCircle(\n      tile_width * 1.5,\n      field_bot - ballRadius,\n      ballRadius\n    );\n    const redTopRight = two.current.makeCircle(\n      tile_width * 4.5,\n      ballRadius,\n      ballRadius\n    );\n    const redBotRight = two.current.makeCircle(\n      tile_width * 4.5,\n      field_bot - ballRadius,\n      ballRadius\n    );\n    const redTopCenterLeft = two.current.makeCircle(\n      tile_width,\n      tile_width * 1.5,\n      ballRadius\n    );\n    const redBotCenterLeft = two.current.makeCircle(\n      tile_width,\n      tile_width * 4.5,\n      ballRadius\n    );\n    const redTopCenterRight = two.current.makeCircle(\n      tile_width * 5,\n      tile_width * 1.5,\n      ballRadius\n    );\n    const redBotCenterRight = two.current.makeCircle(\n      tile_width * 5,\n      tile_width * 4.5,\n      ballRadius\n    );\n    redBalls.current = two.current.makeGroup(\n      redCenterRight,\n      redCenterTop,\n      redTopMidCenter,\n      redTopLeft,\n      redBotLeft,\n      redTopRight,\n      redBotRight,\n      redCenterBot,\n      redBotMidCenter,\n      redCenterLeft,\n      redTopCenterLeft,\n      redBotCenterLeft,\n      redTopCenterRight,\n      redBotCenterRight\n    );\n    redBalls.current.fill = red;\n  };\n\n  /**\n   * Sets up the field when the component is mounted.\n   *\n   * Warning about dependencies is ignored because we only want to run this on mount\n   */\n  useEffect(() => {\n    const rand_gray = () => {\n      var value = Math.random() * 0xf + 0x50;\n      var grayscale = (value << 16) | (value << 8) | value;\n      return \"#\" + grayscale.toString(16);\n    };\n\n    const field_tiles = (two, bg, tile_width) => {\n      for (var i = 0; i < 6; i++) {\n        var x = tile_width * (i + 0.5);\n        for (var j = 0; j < 6; j++) {\n          var y = tile_width * (j + 0.5);\n          var rec = two.current.makeRectangle(x, y, tile_width, tile_width);\n          rec.fill = rand_gray();\n          bg.add(rec);\n        }\n      }\n    };\n\n    const field = () => {\n      const tile_width = two.current.width / 6;\n      const field_center = tile_width * 3;\n      const field_top = 0;\n      const field_bot = tile_width * 6;\n      const field_right = tile_width * 6;\n\n      const goal_radius = tile_width / 5;\n      const goal_linewidth = tile_width / 8;\n      const goal_fill = \"none\";\n      const goal_stroke = \"rgb(0, 0, 0)\";\n\n      const double_line_space = tile_width / 8;\n      const line_width = tile_width / 12;\n\n      var background = two.current.makeGroup([]);\n      field_tiles(two, background, tile_width);\n\n      var left_autonline = two.current.makeLine(\n        field_center - double_line_space,\n        field_top,\n        field_center - double_line_space,\n        field_bot\n      );\n\n      var right_autonline = two.current.makeLine(\n        field_center + double_line_space,\n        field_top,\n        field_center + double_line_space,\n        field_bot\n      );\n\n      var left_line = two.current.makeLine(\n        tile_width,\n        field_top,\n        tile_width,\n        field_bot\n      );\n\n      var right_line = two.current.makeLine(\n        tile_width * 5,\n        field_top,\n        tile_width * 5,\n        field_bot\n      );\n\n      var leftdoubletop_line = two.current.makeLine(\n        0,\n        field_center - double_line_space,\n        tile_width,\n        field_center - double_line_space\n      );\n\n      var leftdoublebot_line = two.current.makeLine(\n        0,\n        field_center + double_line_space,\n        tile_width,\n        field_center + double_line_space\n      );\n\n      var rightdoubletop_line = two.current.makeLine(\n        tile_width * 5,\n        field_center - double_line_space,\n        tile_width * 6,\n        field_center - double_line_space\n      );\n\n      var rightdoublebot_line = two.current.makeLine(\n        tile_width * 5,\n        field_center + double_line_space,\n        tile_width * 6,\n        field_center + double_line_space\n      );\n\n      var lines = two.current.makeGroup([\n        left_autonline,\n        right_autonline,\n        left_line,\n        right_line,\n        leftdoubletop_line,\n        leftdoublebot_line,\n        rightdoublebot_line,\n        rightdoubletop_line,\n      ]);\n      lines.linewidth = line_width;\n      lines.stroke = \"#fff\";\n\n      var topcenter_goal = two.current.makeCircle(\n        field_center,\n        goal_radius + goal_linewidth / 2,\n        goal_radius\n      );\n\n      var topleft_goal = two.current.makeCircle(\n        goal_radius + goal_linewidth / 2,\n        goal_radius + goal_linewidth / 2,\n        goal_radius\n      );\n\n      var topright_goal = two.current.makeCircle(\n        field_right - goal_radius - goal_linewidth / 2,\n        goal_radius + goal_linewidth / 2,\n        goal_radius\n      );\n\n      var leftcenter_goal = two.current.makeCircle(\n        goal_radius + goal_linewidth / 2,\n        field_center,\n        goal_radius\n      );\n\n      var center_goal = two.current.makeCircle(\n        field_center,\n        field_center,\n        goal_radius\n      );\n\n      var rightcenter_goal = two.current.makeCircle(\n        field_right - goal_radius - goal_linewidth / 2,\n        field_center,\n        goal_radius\n      );\n\n      var botleft_goal = two.current.makeCircle(\n        goal_radius + goal_linewidth / 2,\n        field_bot - goal_radius - goal_linewidth / 2,\n        goal_radius\n      );\n\n      var botcenter_goal = two.current.makeCircle(\n        field_center,\n        field_bot - goal_radius - goal_linewidth / 2,\n        goal_radius\n      );\n\n      var botright_goal = two.current.makeCircle(\n        field_right - goal_radius - goal_linewidth / 2,\n        field_bot - goal_radius - goal_linewidth / 2,\n        goal_radius\n      );\n\n      var goals = two.current.makeGroup([\n        topleft_goal,\n        topcenter_goal,\n        topright_goal,\n        leftcenter_goal,\n        center_goal,\n        rightcenter_goal,\n        botleft_goal,\n        botcenter_goal,\n        botright_goal,\n      ]);\n      goals.fill = goal_fill;\n      goals.stroke = goal_stroke;\n      goals.linewidth = goal_linewidth;\n    };\n\n    const newWidth = mount.current.getBoundingClientRect().width;\n    startWidth.current = capSize(newWidth);\n    if (!two.current) {\n      two.current = new Two({\n        width: startWidth.current,\n        height: startWidth.current,\n        autostart: true,\n      }).appendTo(mount.current);\n      two.current.makeGroup();\n    }\n\n    field();\n\n    window.addEventListener(\"resize\", () => {\n      savedBoundingRect.current = mount.current.getBoundingClientRect();\n      const newWidth = savedBoundingRect.current.width;\n      resize(newWidth);\n    });\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  /**\n   * Handle the field state\n   */\n  useEffect(() => {\n    if (field === prevField.current) {\n      // The below state machine only operates on the state transitions\n      return;\n    }\n\n    blueBalls.current?.remove();\n    redBalls.current?.remove();\n\n    switch (field) {\n      case \"COMP\":\n        compSetup();\n        break;\n      case \"SKILLS\":\n        skillsSetup();\n        break;\n      case \"NONE\":\n      default:\n        break;\n    }\n    prevField.current = field;\n  });\n\n  return <></>;\n};\n","import React, { useCallback, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useTheme } from \"@material-ui/core\";\nimport Two from \"two.js\";\n\nimport { FIELD_METERS } from \"../services/units\";\nimport {\n  updateVectorP,\n  updateVectorR,\n  createPath,\n  initNextPath,\n  deletePoint,\n  deletePath,\n  selectPaths,\n  selectPathsAction,\n  curPathKey,\n  nextChar,\n  createPoints,\n  splicePoint,\n} from \"./redux/slice\";\nimport { Field } from \"./field\";\n\nexport const DrawNewPath = (props) => {\n  const mount = useRef(null);\n  const two = useRef(null);\n  const group = useRef(null);\n\n  const startWidth = useRef(null);\n  const savedBoundingRect = useRef(null);\n  const savedLeft = useRef(null);\n\n  const prevMode = useRef(null);\n  const prevLatch = useRef(null);\n\n  const listeners = useRef([]);\n\n  const theme = useTheme();\n  const neutralColor = \"#333\";\n  const editColor = theme.palette.primary.main;\n  const robotColor = theme.palette.primary.light;\n  const red = \"rgb(255, 40, 40)\";\n\n  const robotSquare = useRef(null);\n\n  const {\n    drawerWidth,\n    open,\n    mode,\n    setMode,\n    field,\n    setCanvasDims,\n    latch,\n    trackWidth,\n    badPaths,\n  } = props;\n\n  const dispatch = useDispatch();\n  const paths = useSelector(selectPaths);\n  const pathsAction = useSelector(selectPathsAction);\n\n  /**\n   * Modifies the mouse event to fit with the Two canvas coordinates.\n   *\n   * @param e The mouse event\n   *\n   * @returns {x: number, y: number}\n   */\n  const getCursorPosition = (e) => {\n    const x = e.clientX + window.pageXOffset;\n    const y = e.clientY + window.pageYOffset;\n    // relying on savedLeft to tell us if the drawer is open\n    const left = savedBoundingRect.current.left + savedLeft.current ?? 0;\n    const top = savedBoundingRect.current.top;\n    return {\n      x: (x - left) / two.current.scene.scale,\n      y: (y - top) / two.current.scene.scale,\n    };\n  };\n\n  const addInteractivity = (shape) => {\n    const offset = group.current.translation;\n\n    var drag = function (e) {\n      e.preventDefault();\n      const cursor = getCursorPosition(e);\n      var x = cursor.x - offset.x;\n      var y = cursor.y - offset.y;\n      shape.translation.set(x, y);\n    };\n    var touchDrag = function (e) {\n      e.preventDefault();\n      var touch = e.originalEvent.changedTouches[0];\n      drag({\n        preventDefault: function () {},\n        clientX: touch.pageX,\n        clientY: touch.pageY,\n      });\n      return false;\n    };\n    var dragEnd = function (e) {\n      e.preventDefault();\n\n      if (latch) {\n        Object.entries(paths).forEach((val) => {\n          const [k, p] = val;\n          p.vectors.forEach((v) => {\n            const v_p = two.current.scene.getById(v.p.id);\n\n            if (v.p.id === shape.id) {\n              // This shape is a point, latch it to nearby points\n              Object.entries(paths).forEach((val2) => {\n                const [, p2] = val2;\n                if (p.path === p2.path && p.path) return;\n                p2.vectors.forEach((v2) => {\n                  const v2_p = two.current.scene.getById(v2.p);\n                  const dist = Math.sqrt(\n                    Math.pow(v_p.translation.x - v2_p.translation.x, 2) +\n                      Math.pow(v_p.translation.y - v2_p.translation.y, 2)\n                  );\n                  if (dist > 0.01 && dist < 40) {\n                    v_p.translation.set(v2_p.translation.x, v2_p.translation.y);\n                    const point = {\n                      id: v_p.id,\n                      x: v_p.translation.x,\n                      y: v_p.translation.y,\n                    };\n                    dispatch(updateVectorP({ pathKey: k, point: point }));\n                  }\n                });\n              });\n            }\n\n            if (v.r.id === shape.id) {\n              // This shape is a vector head, latch the vector angle using its point\n              if (\n                Math.abs(shape.rotation) < 0.1 ||\n                Math.abs(shape.rotation - Math.PI) < 0.1\n              ) {\n                shape.translation.set(v_p.translation.x, shape.translation.y);\n                const point = {\n                  id: shape.id,\n                  x: shape.translation.x,\n                  y: shape.translation.y,\n                  yaw: shape.rotation,\n                };\n                dispatch(updateVectorR({ pathKey: k, point: point }));\n              } else if (\n                Math.abs(Math.abs(shape.rotation) - Math.PI / 2) < 0.1 ||\n                Math.abs(shape.rotation - (3 * Math.PI) / 2) < 0.1\n              ) {\n                shape.translation.set(shape.translation.x, v_p.translation.y);\n                const point = {\n                  id: shape.id,\n                  x: shape.translation.x,\n                  y: shape.translation.y,\n                  yaw: shape.rotation,\n                };\n                dispatch(updateVectorR({ pathKey: k, point: point }));\n              }\n            }\n          });\n        });\n      }\n\n      window.removeEventListener(\"mousemove\", drag);\n      window.removeEventListener(\"mouseup\", dragEnd);\n    };\n    var touchEnd = function (e) {\n      e.preventDefault();\n      window.removeEventListener(\"touchmove\", touchDrag);\n      window.removeEventListener(\"touchend\", touchEnd);\n      return false;\n    };\n\n    addNewEventListener(shape._renderer.elem, \"mousedown\", function (e) {\n      console.log(e);\n      e.preventDefault();\n      window.addEventListener(\"mousemove\", drag);\n      window.addEventListener(\"mouseup\", dragEnd);\n    });\n    addNewEventListener(shape._renderer.elem, \"touchstart\", function (e) {\n      e.preventDefault();\n      window.addEventListener(\"touchmove\", touchDrag);\n      window.addEventListener(\"touchend\", touchEnd);\n      return false;\n    });\n  };\n\n  const createAnchorPoint = useCallback(\n    (anchor, newPath, pathKey, idx) => {\n      if (pathKey === \"A\" && anchor === newPath._collection[0]) {\n        // put the robot on the first path's start\n        robotSquare.current = two.current.makeRectangle(\n          anchor.x,\n          anchor.y,\n          (two.current.width / FIELD_METERS) * trackWidth,\n          (two.current.width / FIELD_METERS) * trackWidth\n        );\n        robotSquare.current.noFill().stroke = robotColor;\n        robotSquare.current.linewidth = 2;\n        group.current.add(robotSquare.current);\n      }\n\n      const p = two.current.makeCircle(0, 0, 10);\n      const r = two.current.makePolygon(0, 0, 10);\n      r.rotation =\n        Math.atan2(anchor.controls.right.y, anchor.controls.right.x) +\n        Math.PI / 2;\n\n      p.translation.copy(anchor);\n      r.translation.copy(anchor.controls.right).addSelf(anchor);\n      p.noStroke().fill = r.noStroke().fill = editColor;\n\n      const rl = new Two.Path([\n        new Two.Anchor().copy(p.translation),\n        new Two.Anchor().copy(r.translation),\n      ]);\n      rl.noFill().stroke = editColor;\n\n      const g = two.current.makeGroup(rl, p, r);\n      g.translation.addSelf(newPath.translation);\n      group.current.add(g);\n\n      p.translation.bind(Two.Events.change, function () {\n        anchor.copy(this);\n        r.translation.copy(anchor.controls.right).addSelf(this);\n        rl.vertices[0].copy(this);\n        rl.vertices[1].copy(r.translation);\n        // TODO: make this less annoying\n        if (robotSquare.current) robotSquare.current.translation.copy(this);\n\n        const point = {\n          id: p.id,\n          x: p.translation.x,\n          y: p.translation.y,\n        };\n        dispatch(updateVectorP({ pathKey: pathKey, point: point }));\n      });\n      r.translation.bind(Two.Events.change, function () {\n        anchor.controls.right.copy(this).subSelf(anchor);\n        rl.vertices[1].copy(this);\n\n        const x = -1 * (anchor.controls.right.x - anchor.x);\n        const y = -1 * (anchor.controls.right.y - anchor.y);\n        const opp = new Two.Vector(x, y);\n        anchor.controls.left.copy(opp).subSelf(anchor);\n\n        const rot =\n          Math.atan2(anchor.controls.right.y, anchor.controls.right.x) +\n          Math.PI / 2;\n        r.rotation = rot;\n        // if (robotSquare.current.translation.x === anchor.x)\n        //   robotSquare.current.rotation = rot;\n\n        const point = {\n          id: r.id,\n          x: r.translation.x,\n          y: r.translation.y,\n          yaw: r.rotation,\n        };\n        dispatch(updateVectorR({ pathKey: pathKey, point: point }));\n      });\n\n      // Update the renderer in order to generate the actual elements.\n      two.current.update();\n\n      const gPoint = {\n        id: g.id,\n        x: g.translation.x,\n        y: g.translation.y,\n      };\n      const pPoint = {\n        id: p.id,\n        x: p.translation.x,\n        y: p.translation.y,\n      };\n      const rPoint = {\n        id: r.id,\n        x: r.translation.x,\n        y: r.translation.y,\n        yaw: r.rotation,\n      };\n      return { s: robotSquare.current.id, g: gPoint, p: pPoint, r: rPoint };\n    },\n    [dispatch, editColor, robotColor, trackWidth]\n  );\n\n  const drawLine = (anchors) => {\n    const newPath = new Two.Path(anchors, false, true, true);\n    newPath.cap = newPath.join = \"round\";\n    newPath.noFill().stroke = neutralColor;\n    newPath.linewidth = 5;\n    group.current.add(newPath);\n    return newPath;\n  };\n\n  // TODO: handle the case where a point is inserted\n\n  const createNewPath = useCallback(\n    (pathKey) => {\n      const anchors = [];\n      const lastPoint = paths[pathKey].waypoints.length - 1;\n      for (let i = lastPoint; i >= 0; --i) {\n        // iterate backwards through points so we are driving the right direction\n        const p = two.current.scene.getById(paths[pathKey].waypoints[i].id);\n        let anchor;\n        if (i === lastPoint) {\n          anchor = new Two.Anchor(\n            p.translation.x,\n            p.translation.y,\n            0,\n            100,\n            0,\n            -100,\n            \"M\"\n          );\n          anchors.push(anchor);\n        } else {\n          anchor = new Two.Anchor(\n            p.translation.x,\n            p.translation.y,\n            0,\n            100,\n            0,\n            -100,\n            \"C\"\n          );\n          anchors.push(anchor);\n        }\n        two.current.remove(p);\n        two.current.update(); // render the elements before adding interactivity\n      }\n\n      group.current = two.current.makeGroup();\n      const newPath = drawLine(anchors);\n\n      const vectors = [];\n      newPath.vertices.forEach(function (anchor) {\n        vectors.push(createAnchorPoint(anchor, newPath, pathKey));\n      });\n      dispatch(\n        createPath({\n          pathKey: pathKey,\n          vectors: vectors,\n          path: newPath.id,\n        })\n      );\n    },\n    [two, paths, createAnchorPoint, dispatch]\n  );\n\n  useEffect(() => {\n    if (pathsAction === \"CREATE_PATH\") {\n      const pathKey = curPathKey({ paths: paths });\n      createNewPath(pathKey);\n      // create the next path's array\n      dispatch(initNextPath({ pathKey: nextChar(pathKey) }));\n      setMode(\"EDIT\");\n    }\n  }, [pathsAction, createNewPath, dispatch, setMode, paths]);\n\n  // TODO: move all of this logic into redux slice\n  const placePoints = (e) => {\n    e.preventDefault();\n\n    const cursor = getCursorPosition(e);\n    const point = two.current.makeCircle(cursor.x, cursor.y, 10);\n    point.fill = editColor;\n\n    const writePoint = {\n      id: point.id,\n      x: point.translation.x,\n      y: point.translation.y,\n    };\n    dispatch(createPoints({ point: writePoint }));\n  };\n\n  const addNewEventListener = (node, event, handler) => {\n    const listener = { node: node, event: event, handler: handler };\n    for (let i = 0; i < listeners.current.length; ++i) {\n      if (listeners.current[i] === listener) {\n        // the new event is already defined, don't define it again\n        return;\n      }\n    }\n    node.addEventListener(event, handler);\n    listeners.current.push(listener);\n  };\n\n  // const deleteEventListener = (node, event, handler) => {\n  //   const listener = { node: node, event: event, handler: handler };\n  //   for (let i = 0; i < listeners.current.length; ++i) {\n  //     if (listeners.current[i] === listener) {\n  //       const x = listeners.current[i];\n  //       x.node.removeEventListener(x.event, x.handler);\n  //       listeners.current.remove(x);\n  //       return;\n  //     }\n  //   }\n  // };\n\n  const removeAllEventListeners = () => {\n    for (let i = 0; i < listeners.current.length; ++i) {\n      const x = listeners.current[i];\n      x?.node?.removeEventListener(x.event, x.handler);\n    }\n    listeners.current = [];\n  };\n\n  const capSize = (newWidth) => {\n    return Math.max(100, Math.min(newWidth, 800));\n  };\n\n  const resize = useCallback(\n    (width) => {\n      width = capSize(width);\n      two.current.scene.scale = width / startWidth.current;\n      two.current.renderer.setSize(width, width);\n      setCanvasDims({ x: startWidth.current, y: startWidth.current });\n    },\n    [two, setCanvasDims, startWidth]\n  );\n\n  /**\n   * Resizes the Two.js canvas each time the component updates.\n   */\n  useEffect(() => {\n    if (savedBoundingRect.current === null) {\n      // we have not yet saved a box size, store it\n      // We're storing the bounding client width because it updates out of\n      // sync with the Material UI drawer\n      savedBoundingRect.current = mount.current.getBoundingClientRect();\n    }\n    const boxWidth = savedBoundingRect.current.width;\n    if (open) {\n      savedLeft.current = drawerWidth;\n      resize(boxWidth - drawerWidth);\n    } else {\n      savedLeft.current = 0;\n      resize(boxWidth);\n    }\n  }, [open, drawerWidth, resize]);\n\n  /**\n   * Handles the State Machine for the edit modes.\n   */\n  useEffect(() => {\n    if (mode === prevMode.current && latch === prevLatch.current) {\n      // The below state machine only operates on the state transitions\n      return;\n    }\n\n    switch (mode) {\n      case \"ADD_PATH\":\n        removeAllEventListeners();\n        Object.entries(paths).forEach((val) => {\n          const [, p] = val;\n          const path = two.current.scene.getById(p.path);\n\n          if (!path) return;\n          path.stroke = neutralColor;\n          p.vectors.forEach((v) => {\n            const p = two.current.scene.getById(v.p.id);\n            const r = two.current.scene.getById(v.r.id);\n            p.fill = neutralColor;\n            r.fill = neutralColor;\n          });\n        });\n        addNewEventListener(mount.current, \"click\", placePoints);\n        break;\n      case \"EDIT\":\n        removeAllEventListeners();\n\n        Object.entries(paths).forEach((val) => {\n          const [, p] = val;\n          const path = two.current.scene.getById(p.path);\n\n          if (!p.vectors) return;\n          if (p.path) {\n            path.stroke = path.stroke === red ? red : neutralColor;\n          }\n          p.vectors.forEach((v) => {\n            const p = two.current.scene.getById(v.p.id);\n            const r = two.current.scene.getById(v.r.id);\n            addInteractivity(p);\n            addInteractivity(r);\n\n            p.fill = editColor;\n            r.fill = editColor;\n          });\n        });\n        break;\n      case \"ADD_POINTS\":\n        removeAllEventListeners();\n\n        Object.entries(paths).forEach((val) => {\n          const [key, p] = val;\n          const path = two.current.scene.getById(p.path);\n          if (!path) return;\n\n          p.vectors.forEach((v) => {\n            const p = two.current.scene.getById(v.p.id);\n            const r = two.current.scene.getById(v.r.id);\n            p.fill = neutralColor;\n            r.fill = neutralColor;\n          });\n          path.stroke = editColor;\n\n          addNewEventListener(path._renderer.elem, \"click\", (e) => {\n            const midpoint = path.getPointAt(0.5);\n            const rotation =\n              Math.atan2(midpoint.controls.right.y, midpoint.controls.right.x) +\n              Math.PI / 2;\n\n            const anchor = new Two.Anchor(\n              midpoint.x,\n              midpoint.y,\n              100 * Math.cos(rotation + Math.PI / 2),\n              100 * Math.sin(rotation + Math.PI / 2),\n              -100 * Math.cos(rotation + Math.PI / 2),\n              -100 * Math.sin(rotation + Math.PI / 2),\n              \"C\"\n            );\n            const anchors = path.vertices;\n            anchors.splice(1, 0, anchor); // insert anchor in the middle\n            const newPath = drawLine(anchors);\n            const newVec = createAnchorPoint(\n              anchor,\n              newPath,\n              key,\n              anchors.length\n            );\n            dispatch(\n              splicePoint({ pathKey: key, vector: newVec, path: newPath.id })\n            );\n            setMode(\"EDIT\");\n          });\n        });\n        break;\n      case \"REMOVE_POINTS\":\n        removeAllEventListeners();\n\n        Object.entries(paths).forEach((val) => {\n          const [key, p] = val;\n          if (!p.path) return;\n\n          const path = two.current.scene.getById(p.path);\n          p.vectors.forEach((v) => {\n            const p = two.current.scene.getById(v.p.id);\n            const r = two.current.scene.getById(v.r.id);\n            p.fill = neutralColor;\n            r.fill = neutralColor;\n          });\n          path.stroke = editColor;\n\n          addNewEventListener(path._renderer.elem, \"click\", (e) => {\n            const anchors = path.vertices;\n            anchors.pop();\n            if (anchors.length < 2) {\n              p.vectors.forEach((v) => {\n                const g = two.current.scene.getById(v.g.id);\n                g.remove();\n                if (v.s) {\n                  const s = two.current.scene.getById(v.s);\n                  group.current.remove(s);\n                }\n              });\n              two.current.remove(p.path);\n              dispatch(deletePath({ pathKey: key }));\n            } else {\n              // can't remove the path after removing midpoint\n              const vec = p.vectors[p.vectors.length - 1];\n              const g = two.current.scene.getById(vec.g.id);\n              g.remove();\n              path.remove();\n              const newPath = drawLine(anchors);\n              two.current.update();\n              dispatch(deletePoint({ pathKey: key, path: newPath.id }));\n            }\n          });\n        });\n        break;\n      default:\n        break;\n    }\n    prevLatch.current = latch;\n    prevMode.current = mode;\n  });\n\n  useEffect(() => {\n    Object.entries(paths).forEach((k, v) => {\n      if (badPaths.get(k) === 1) {\n        // this path is bad!\n        v.path.stroke = red;\n      } else if (v.path) {\n        v.path.stroke = neutralColor;\n      }\n    });\n    two.current.update();\n  }, [paths, badPaths]);\n\n  useEffect(() => {\n    if (!robotSquare.current) return;\n\n    robotSquare.current.width = (two.current.width / FIELD_METERS) * trackWidth;\n    robotSquare.current.height =\n      (two.current.width / FIELD_METERS) * trackWidth;\n  }, [trackWidth]);\n\n  return (\n    <div ref={mount}>\n      <Field\n        two={two}\n        startWidth={startWidth}\n        mount={mount}\n        savedBoundingRect={savedBoundingRect}\n        capSize={capSize}\n        resize={resize}\n        field={field}\n      />\n    </div>\n  );\n};\n","import { FIELD_METERS } from \"./units\";\n\nexport const squigglesCoords = (\n  canvasX: number,\n  canvasY: number,\n  x: number,\n  y: number,\n  yaw: number,\n  vel?: number\n) => ({\n  // TODO: check if the starting position is top left\n  // Make (0, 0) be the bottom left, then X is up and Y is right for Okapi\n  x: (x / canvasX) * FIELD_METERS,\n  y: (1 - y / canvasY) * FIELD_METERS,\n  yaw: -1 * (yaw + Math.PI / 2),\n  vel: vel\n    ? (vel / Math.sqrt(Math.pow(canvasX, 2) + Math.pow(canvasY, 2))) *\n      FIELD_METERS\n    : 0,\n});\n\nexport const okapiCoords = (\n  canvasX: number,\n  canvasY: number,\n  x: number,\n  y: number,\n  yaw: number\n) => ({\n  // TODO: check if the starting position is top left\n  // Make (0, 0) be the bottom left, then X is up and Y is right for Okapi\n  x: (1 - y / canvasY) * FIELD_METERS,\n  y: (x / canvasX) * FIELD_METERS,\n  yaw: yaw,\n});\n","import React from \"react\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Box from \"@material-ui/core/Box\";\nimport { CopyBlock, atomOneDark } from \"react-code-blocks\";\n\nimport { squigglesCoords, okapiCoords } from \"../services/coords\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box\n          pt={2}\n          p={1}\n          style={{ backgroundColor: \"#282c34\" /* match the OneDark bg */ }}\n        >\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    maxWidth: 800,\n  },\n}));\n\nexport interface CanvasDims {\n  x: number;\n  y: number;\n}\nexport interface SimpleTabsProps {\n  paths: Map<string, any>;\n  trackWidth: string;\n  maxVel: string;\n  maxAccel: string;\n  maxJerk: string;\n  canvasDims: CanvasDims;\n}\n\nexport default function SimpleTabs(props: SimpleTabsProps) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const { paths, trackWidth, maxVel, maxAccel, maxJerk, canvasDims } = props;\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const squigglesCode = () => {\n    let out = \"#define PATH_DT             (0.01)\\n\";\n    out += `#define PATH_MAX_VEL        (${maxVel})\\n`;\n    out += `#define PATH_MAX_ACCEL      (${maxAccel})\\n`;\n    out += `#define PATH_MAX_JERK       (${maxJerk})\\n`;\n    out += `#define CHASSIS_TRACK_WIDTH (${trackWidth})\\n\\n`;\n    out +=\n      \"auto constraints = squiggles::Constraints(PATH_MAX_VEL, PATH_MAX_ACCEL, PATH_MAX_JERK);\\n\";\n    out += `auto model = std::make_shared<squiggles::TankModel>(CHASSIS_TRACK_WIDTH, constraints);\\n`;\n    out +=\n      \"auto generator = squiggles::SplineGenerator(constraints, model, PATH_DT);\\n\\n\";\n    out += Array.from(Object.entries(paths))\n      .slice(0, -1)\n      .map(([k, v]) => {\n        let path = `auto path${k} = generator.generate({\\n`;\n        for (let i = 0; i < v.vectors.length; ++i) {\n          const vec = v.vectors[i];\n          let yaw = vec.r.yaw;\n          const coords = squigglesCoords(\n            canvasDims.x,\n            canvasDims.y,\n            vec.p.x,\n            vec.p.y,\n            yaw\n          );\n          const x = coords.x;\n          const y = coords.y;\n          yaw = coords.yaw;\n          path += `\\tsquiggles::ControlVector(squiggles::Pose(${x.toFixed(\n            3\n          )}, ${y.toFixed(3)}, ${yaw.toFixed(3)})})`;\n          if (i < v.vectors.length - 1) {\n            path += \",\\n\";\n          } else {\n            path += \"\\n\";\n          }\n        }\n        path += \"});\\n\";\n        return path;\n      })\n      .join(\"\");\n    return out;\n  };\n\n  const okapiCode = () => {\n    let out = \"// TODO: Fill in the info below for your robot\\n\";\n    out += \"#define LEFT_CHASSIS_MOTOR_PORTS ({1, 2})\\n\";\n    out += \"#define RIGHT_CHASSIS_MOTOR_PORTS ({3, 4})\\n\";\n    out += \"#define WHEEL_DIAMETER (4_in)\\n\";\n    out +=\n      \"#define CHASSIS_MOTOR_CARTRIDGE (okapi::AbstractMotor::gearset::green)\\n\";\n    out +=\n      \"#define CHASSIS_CARTRIDGE_TICKS (imev5GreenTPR) // Should match above\\n\\n\";\n    out += `#define PATH_MAX_VEL        (${maxVel})\\n`;\n    out += `#define PATH_MAX_ACCEL      (${maxAccel})\\n`;\n    out += `#define PATH_MAX_JERK       (${maxJerk})\\n`;\n    out += `#define CHASSIS_TRACK_WIDTH (${trackWidth}_m)\\n\\n`;\n    out += \"auto chassis = okapi::ChassisControllerBuilder()\\n\";\n    out +=\n      \"\\t.withMotors(LEFT_CHASSIS_MOTOR_PORTS, RIGHT_CHASSIS_MOTOR_PORTS)\\n\";\n    out += \"\\t.withDimensions(\\n\";\n    out += \"\\t\\tCHASSIS_MOTOR_CARTRIDGE,\\n\";\n    out +=\n      \"\\t\\t{{WHEEL_DIAMETER, CHASSIS_TRACK_WIDTH}, CHASSIS_CARTRIDGE_TICKS})\\n\";\n    out += \"\\t.build();\\n\";\n    out +=\n      \"auto profileController = okapi::AsyncMotionProfileControllerBuilder()\\n\";\n    out += \"\\t.withLimits({PATH_MAX_VEL, PATH_MAX_ACCEL, PATH_MAX_JERK})\\n\";\n    out += \"\\t.withOutput(chassis)\\n\";\n    out += \"\\t.buildMotionProfileController();\\n\\n\";\n    out += \"/**\\n\";\n    out += \" * The Coordinate System for Okapi Points is:\\n\";\n    out += \" * ^\\n\";\n    out += \" * | x\\n\";\n    out += \" * |    ↷ yaw\\n\";\n    out += \" * |   y\\n\";\n    out += \" * ------>\\n\";\n    out += \" */\\n\";\n    out += Array.from(Object.entries(paths))\n      .slice(0, -1)\n      .map(([k, v]) => {\n        let path = \"profileController->generatePath({\\n\";\n        for (let i = 0; i < v.vectors.length; ++i) {\n          const vec = v.vectors[i];\n          let yaw = vec.r.yaw;\n          const coords = okapiCoords(\n            canvasDims.x,\n            canvasDims.y,\n            vec.p.x,\n            vec.p.y,\n            yaw\n          );\n          const x = coords.x;\n          const y = coords.y;\n          yaw = coords.yaw;\n          path += `\\t{${x.toFixed(3)}_m, ${y.toFixed(3)}_m, ${yaw.toFixed(\n            3\n          )}_rad},\\n`;\n        }\n        path += `\\t\"${k}\"\\n});\\n`;\n        return path;\n      })\n      .join(\"\");\n    return out;\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"simple tabs example\"\n        >\n          <Tab label=\"Okapi\" {...a11yProps(0)} />\n          <Tab label=\"Squiggles\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <CopyBlock\n          text={okapiCode()}\n          language={\"cpp\"}\n          showLineNumbers={true}\n          theme={atomOneDark}\n          codeBlock\n        />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <CopyBlock\n          text={squigglesCode()}\n          language={\"cpp\"}\n          showLineNumbers={true}\n          theme={atomOneDark}\n          codeBlock\n        />\n      </TabPanel>\n    </div>\n  );\n}\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst themeColor = \"rgb(50, 168, 82)\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"rgb(102, 204, 129)\",\n      main: themeColor,\n      dark: themeColor,\n    },\n  },\n  overrides: {\n    MuiToggleButton: {\n      root: {\n        \"&$selected\": {\n          color: \"#fff\",\n          backgroundColor: themeColor,\n        },\n      },\n    },\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport {\n  IconButton,\n  Divider,\n  List,\n  ListItem,\n  Typography,\n  TextField,\n  useTheme,\n  MenuItem,\n  Checkbox,\n  FormControlLabel,\n} from \"@material-ui/core\";\nimport { ToggleButtonGroup, ToggleButton } from \"@material-ui/lab\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    drawerHeader: {\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: \"flex-end\",\n    },\n  })\n);\n\nexport interface SidebarContentProps {\n  handleDrawerClose: () => void;\n  mode: string;\n  setMode: (mode: string) => void;\n  field: string;\n  setField: (field: string) => void;\n  trackWidth: string;\n  setTrackWidth: (trackWidth: string) => void;\n  maxVel: string;\n  setMaxVel: (maxVel: string) => void;\n  maxAccel: string;\n  setMaxAccel: (maxAccel: string) => void;\n  maxJerk: string;\n  setMaxJerk: (maxJerk: string) => void;\n  latch: boolean;\n  setLatch: (latch: boolean) => void;\n}\n\nexport const SidebarContent = (props: SidebarContentProps) => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const seasons = [\"2020-2021 Change Up\"];\n\n  return (\n    <>\n      <div className={classes.drawerHeader}>\n        <IconButton onClick={props.handleDrawerClose}>\n          {theme.direction === \"ltr\" ? (\n            <ChevronLeftIcon />\n          ) : (\n            <ChevronRightIcon />\n          )}\n        </IconButton>\n      </div>\n      <Divider />\n      <List>\n        <ListItem>\n          <Typography variant=\"subtitle1\">Mode</Typography>\n        </ListItem>\n        <ListItem key={\"mode\"}>\n          <ToggleButtonGroup\n            value={props.mode}\n            size=\"small\"\n            exclusive\n            onChange={(e, newMode) => {\n              if (newMode !== null) {\n                props.setMode(newMode);\n              }\n            }}\n            aria-label=\"path add/edit mode\"\n          >\n            <ToggleButton value=\"ADD_PATH\" aria-label=\"left aligned\">\n              ADD PATH\n            </ToggleButton>\n            <ToggleButton value=\"EDIT\" aria-label=\"centered\">\n              MOVE\n            </ToggleButton>\n            <ToggleButton value=\"ADD_POINTS\" aria-label=\"centered\">\n              ADD POINTS\n            </ToggleButton>\n            <ToggleButton value=\"REMOVE_POINTS\" aria-label=\"centered\">\n              REMOVE POINTS\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </ListItem>\n        <ListItem>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={props.latch}\n                onChange={(e) => props.setLatch(e.target.checked)}\n                name=\"Latch\"\n                color=\"primary\"\n              />\n            }\n            label={\"Latch to Cardinal Directions and Other Points\"}\n          />\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem>\n          <Typography variant=\"subtitle1\">Robot Specs</Typography>\n        </ListItem>\n        <ListItem>\n          {/* TODO: validate that these values are floats */}\n          <TextField\n            variant=\"outlined\"\n            required\n            label=\"Track Width (m)\"\n            value={props.trackWidth}\n            onChange={(e) => props.setTrackWidth(e.target.value)}\n          />\n        </ListItem>\n        <ListItem>\n          <TextField\n            variant=\"outlined\"\n            required\n            label=\"Max Velocity (m/s)\"\n            value={props.maxVel}\n            onChange={(e) => props.setMaxVel(e.target.value)}\n          />\n        </ListItem>\n        <ListItem>\n          <TextField\n            variant=\"outlined\"\n            label=\"Max Acceleration (m/s/s)\"\n            value={props.maxAccel}\n            onChange={(e) => props.setMaxAccel(e.target.value)}\n          />\n        </ListItem>\n        <ListItem>\n          <TextField\n            variant=\"outlined\"\n            label=\"Max Jerk (m/s/s/s)\"\n            value={props.maxJerk}\n            onChange={(e) => props.setMaxJerk(e.target.value)}\n          />\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem>\n          <Typography variant=\"subtitle1\">Field Setup</Typography>\n        </ListItem>\n        <ListItem>\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            id=\"season-select\"\n            select\n            label=\"Comp Season\"\n            defaultValue={seasons[0]}\n          >\n            {seasons.map((s) => (\n              <MenuItem key={s} value={s}>\n                {s}\n              </MenuItem>\n            ))}\n          </TextField>\n        </ListItem>\n        <ListItem>\n          <ToggleButtonGroup\n            value={props.field}\n            exclusive\n            onChange={(e, newField) => {\n              if (newField !== null) {\n                props.setField(newField);\n              }\n            }}\n            aria-label=\"path add/edit mode\"\n          >\n            <ToggleButton value=\"COMP\" aria-label=\"left aligned\">\n              COMP\n            </ToggleButton>\n            <ToggleButton value=\"SKILLS\" aria-label=\"centered\">\n              AUTON\n            </ToggleButton>\n            <ToggleButton value=\"NONE\" aria-label=\"centered\">\n              NONE\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem>\n          <Typography variant=\"subtitle1\">Troubleshooting</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            Paths in red CANNOT be generated by Squiggles. <br />\n            If a path appears in red, try editing your Robot Specs.\n          </Typography>\n        </ListItem>\n      </List>\n    </>\n  );\n};\n","class Squiggles {\n  /**\n   * We will use this method privately to communicate with the worker and\n   * return a promise with the result of the event. This way we can call\n   * the worker asynchronously.\n   */\n  _dispatch(event) {\n    const { msg } = event;\n    this._status[msg] = [\"loading\"];\n    this.worker.postMessage(event);\n    return new Promise((res, rej) => {\n      let interval = setInterval(() => {\n        const status = this._status[msg];\n        if (!status) return;\n        if (status[0] === \"done\") res(status[1]);\n        if (status[0] === \"error\") rej(status[1]);\n        if (status[0] !== \"loading\") {\n          delete this._status[msg];\n          clearInterval(interval);\n        }\n      }, 50);\n    });\n  }\n\n  /**\n   * First, we will load the worker and we will capture the onmessage\n   * and onerror events to know at all times the status of the event\n   * we have triggered.\n   *\n   * Then, we are going to call the 'load' event, as we've just\n   * implemented it so that the worker can capture it.\n   */\n  load() {\n    this._status = {};\n    this.worker = new Worker(\"robotsquiggles/js/squiggles.worker.js\"); // load worker\n\n    // Capture events and save [status, event] inside the _status object\n    this.worker.onmessage = (e) => (this._status[e.data.msg] = [\"done\", e]);\n    this.worker.onerror = (e) => (this._status[e?.data?.msg] = [\"error\", e]);\n    return this._dispatch({ msg: \"load\" });\n  }\n\n  /**\n   * We are going to use the _dispatch event that we created before to\n   * call the postMessage with the msg and the image as payload.\n   *\n   * Thanks to what we have implemented in the _dispatch, this will\n   * return a promise with the squiggles result.\n   */\n  test() {\n    console.log(\"service\");\n    return this._dispatch({ msg: \"asdfghjkl\" });\n  }\n\n  generate(payload) {\n    return this._dispatch({ msg: \"generate\", payload });\n  }\n}\n\n// Export the same instant everywhere\nexport default new Squiggles();\n","import React, { useEffect, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { ThemeProvider, Button } from \"@material-ui/core\";\n\nimport { DrawNewPath } from \"./components\";\nimport SimpleTabs from \"./components/generated\";\nimport theme from \"./theme\";\nimport { SidebarContent } from \"./components/sidebar\";\nimport squiggles from \"./services/squiggles\";\nimport { useDebouncedEffect } from \"./services/useDebouncedEffect\";\nimport { squigglesCoords } from \"./services/coords\";\nimport { useSelector } from \"react-redux\";\nimport { selectPaths } from \"./components/redux\";\n\nconst drawerWidth = 300;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n    },\n    appBar: {\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    docs: {\n      fontWeight: 600,\n      letterSpacing: 1.5,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    hide: {\n      display: \"none\",\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerHeader: {\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: \"flex-end\",\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -drawerWidth,\n      overflow: \"hidden\",\n    },\n    contentShift: {\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n  })\n);\n\nexport const App = (props: any) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false); // setting this to true breaks the alignment of two.js\n  const [mode, setMode] = useState(\"ADD_PATH\");\n  const [latch, setLatch] = useState(true);\n  const [field, setField] = useState(\"NONE\");\n  const [trackWidth, setTrackWidth] = useState(\"0.45\");\n  const [maxVel, setMaxVel] = useState(\"1.0\");\n  const [maxAccel, setMaxAccel] = useState(\"2.0\");\n  const [maxJerk, setMaxJerk] = useState(\"10.0\");\n  const [canvasDims, setCanvasDims] = useState({\n    x: window.innerWidth,\n    y: window.innerHeight,\n  });\n  const [badPaths, setBadPaths] = useState(new Map<string, number>());\n  const paths = useSelector(selectPaths);\n\n  useDebouncedEffect(\n    () => {\n      Object.entries(paths).forEach(([k, v]: [string, any]) => {\n        if (!v.waypoints[1] || !v.vectors[1] || v.vectors.length > 2) return;\n        // TODO: allow for three+ point paths\n        const poses = [];\n        for (let i = v.vectors.length - 1; i >= 0; --i) {\n          const vec = v.vectors[i];\n          let yaw = vec.r.yaw;\n          let vel = Math.sqrt(\n            Math.pow(vec.r.x - vec.p.x, 2) + Math.pow(vec.r.y - vec.p.y, 2)\n          );\n          const coords = squigglesCoords(\n            canvasDims.x,\n            canvasDims.y,\n            vec.p.x,\n            vec.p.y,\n            yaw,\n            vel\n          );\n          poses.push({\n            x: coords.x,\n            y: coords.y,\n            yaw: coords.yaw,\n            vel: coords.vel,\n          });\n        }\n        const payload = {\n          sx: poses[0].x,\n          sy: poses[0].y,\n          syaw: poses[0].yaw,\n          sv: poses[0].vel,\n          gx: poses[1].x,\n          gy: poses[1].y,\n          gyaw: poses[1].yaw,\n          gv: poses[1].vel,\n          max_vel: parseFloat(maxVel),\n          max_accel: parseFloat(maxAccel),\n          max_jerk: parseFloat(maxJerk),\n          track_width: parseFloat(trackWidth),\n        };\n        generatePath(k, payload);\n      });\n    },\n    200,\n    [paths, maxVel, maxAccel, maxJerk, trackWidth]\n  );\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  async function generatePath(path: string, payload: any) {\n    const rtn = await squiggles.generate(payload);\n    setBadPaths(new Map(badPaths.set(path, rtn.data.payload)));\n  }\n\n  // Load the Squiggles WASM library only when the component is mounted\n  useEffect(() => {\n    squiggles.load();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar\n          position=\"fixed\"\n          className={clsx(classes.appBar, {\n            [classes.appBarShift]: open,\n          })}\n        >\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, open && classes.hide)}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap className={classes.title}>\n              Squiggles Drawing Board\n            </Typography>\n            <Button\n              href=\"https://squiggles.readthedocs.io\"\n              color=\"inherit\"\n              size=\"large\"\n            >\n              <Typography variant=\"h6\" className={classes.docs}>\n                DOCS\n              </Typography>\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={open}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <SidebarContent\n            handleDrawerClose={handleDrawerClose}\n            mode={mode}\n            setMode={setMode}\n            field={field}\n            setField={setField}\n            trackWidth={trackWidth}\n            setTrackWidth={setTrackWidth}\n            maxVel={maxVel}\n            setMaxVel={setMaxVel}\n            maxAccel={maxAccel}\n            setMaxAccel={setMaxAccel}\n            maxJerk={maxJerk}\n            setMaxJerk={setMaxJerk}\n            latch={latch}\n            setLatch={setLatch}\n          />\n        </Drawer>\n        <main\n          className={clsx(classes.content, {\n            [classes.contentShift]: open,\n          })}\n        >\n          <div className={classes.drawerHeader} />\n          <DrawNewPath\n            drawerWidth={drawerWidth}\n            open={open}\n            mode={mode}\n            setMode={setMode}\n            field={field}\n            setCanvasDims={setCanvasDims}\n            latch={latch}\n            trackWidth={trackWidth}\n            badPaths={badPaths}\n          />\n          <SimpleTabs\n            paths={paths}\n            trackWidth={trackWidth}\n            maxVel={maxVel}\n            maxAccel={maxAccel}\n            maxJerk={maxJerk}\n            canvasDims={canvasDims}\n          />\n        </main>\n      </div>\n    </ThemeProvider>\n  );\n};\n","import { useCallback, useEffect } from \"react\";\n\nexport const useDebouncedEffect = (effect, delay, deps) => {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const callback = useCallback(effect, deps);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      callback();\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [callback, delay]);\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport pathsReducer from \"./slice\";\nimport { PathsState } from \"./state\";\n\nconst store = configureStore({\n  reducer: {\n    paths: pathsReducer,\n  },\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActionPaths: [\"payload\"],\n      ignoredPaths: [\"paths\"],\n    },\n  }).concat(logger),\n});\n\nexport default store;\n\nexport type RootState = {\n  paths: PathsState;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport { App } from \"./app\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./components/redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/**\n * Manages app state for the shared state of all drawn paths.\n */\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { PathsState } from \"./state\";\n\nconst initialState: PathsState = { paths: {} };\n\nexport const nextChar = (str: string) => {\n  return (\n    str.substring(0, str.length - 1) +\n    String.fromCharCode(str.charCodeAt(str.length - 1) + 1)\n  );\n};\n\nexport const curPathKey = (state: PathsState) => {\n  let curKey = \"A\";\n  for (const k of Object.keys(state.paths)) {\n    if (k.charCodeAt(0) > curKey.charCodeAt(0)) {\n      curKey = k;\n    }\n  }\n  return curKey;\n};\n\nconst _initPath = (state: PathsState, nextPath: string) => {\n  state.paths[nextPath] = {\n    waypoints: [],\n    vectors: [],\n    path: null,\n  };\n};\n\nconst addPoint = (state: PathsState, payload: any) => {\n  state.paths[payload.pathKey] = {\n    ...state.paths[payload.pathKey],\n    waypoints: [payload.point, ...state.paths[payload.pathKey].waypoints],\n  };\n};\n\nconst pathsSlice = createSlice({\n  name: \"paths\",\n  initialState,\n  reducers: {\n    updateVectorP(state: PathsState, action) {\n      state.paths[action.payload.pathKey] = {\n        ...state.paths[action.payload.pathKey],\n        vectors:\n          state.paths[action.payload.pathKey]?.vectors.map((v) =>\n            v.p.id === action.payload.point.id\n              ? { s: v.s, g: v.g, p: action.payload.point, r: v.r }\n              : v\n          ) ?? [],\n      };\n    },\n    updateVectorR(state: PathsState, action) {\n      state.paths[action.payload.pathKey] = {\n        ...state.paths[action.payload.pathKey],\n        vectors:\n          state.paths[action.payload.pathKey]?.vectors.map((v) =>\n            v.r.id === action.payload.point.id\n              ? { s: v.s, g: v.g, p: v.p, r: action.payload.point }\n              : v\n          ) ?? [],\n      };\n    },\n    createPath(state: PathsState, action) {\n      state.paths[action.payload.pathKey] = {\n        ...state.paths[action.payload.pathKey],\n        vectors: action.payload.vectors,\n        path: action.payload.path,\n      };\n      state.actionNeeded = undefined;\n    },\n    initPath(state: PathsState, action) {\n      state.paths[action.payload.pathKey] = {\n        waypoints: [],\n        vectors: [],\n        path: null,\n      };\n    },\n    initNextPath(state: PathsState, action) {\n      const nextPath = nextChar(curPathKey(state));\n      state.paths[nextPath] = {\n        waypoints: [],\n        vectors: [],\n        path: null,\n      };\n    },\n    deletePoint(state: PathsState, action) {\n      console.log(action.payload.path);\n      state.paths[action.payload.pathKey].vectors.pop();\n      state.paths[action.payload.pathKey].path = action.payload.path;\n    },\n    deletePath(state: PathsState, action) {\n      delete state.paths[action.payload.pathKey];\n    },\n    createPoints(state: PathsState, action) {\n      if (Object.keys(state.paths).length === 0) {\n        _initPath(state, \"A\");\n      }\n      const pathKey = curPathKey(state);\n      addPoint(state, { pathKey: pathKey, point: action.payload.point });\n\n      if (state.paths[pathKey]?.waypoints?.length > 1) {\n        state.actionNeeded = \"CREATE_PATH\";\n      }\n    },\n    splicePoint(state: PathsState, action) {\n      state.paths[action.payload.pathKey].vectors.splice(\n        1,\n        0,\n        action.payload.vector\n      );\n      state.paths[action.payload.pathKey] = {\n        ...state.paths[action.payload.pathKey],\n        path: action.payload.path,\n      };\n    },\n  },\n});\n\nexport default pathsSlice.reducer;\nexport const {\n  updateVectorP,\n  updateVectorR,\n  createPath,\n  initNextPath,\n  deletePoint,\n  deletePath,\n  createPoints,\n  splicePoint,\n} = pathsSlice.actions;\nexport const selectPaths = (state: any) => state.paths.paths;\nexport const selectPathsAction = (state: any) => state.paths.actionNeeded;\n"],"sourceRoot":""}